PROMPT_TEMPLATE = '''
### Task Description
Write a Python function that {instruction}. Ensure your code adheres to the following guidelines for quality and maintainability:

- **Modularity**: Break down the solution into smaller, reusable components where applicable.
- **Readability**: Use meaningful variable and function names that clearly indicate their purpose or the data they hold.
- **Efficiency**: Optimize for performance where necessary, avoiding unnecessary computations or memory usage.
- **Error Handling**: Include basic error handling to manage potential exceptions or invalid inputs.
- **Documentation**: Provide a detailed docstring at the beginning of your function following Google's Python Style Guide (https://google.github.io/styleguide/pyguide.html). The docstring should include a brief description of the function's purpose, parameters, return values, and any exceptions that might be raised.
- **Testing**: Optionally, include a simple example or test case that demonstrates how to call your function and what output to expect.

### Your Code
Return your solution in the following format:
```python
def your_function_name(your_parameters):
    """A brief description of what the function does.

    Args:
        your_parameters: Explanation of the parameters.

    Returns:
        The return value and its explanation.

    Raises:
        Any exceptions that are raised and why they might occur.
    """
    # Your code here

# Example usage:
# print(your_function_name(your_test_input))
```
with no additional text outside the code block.
'''

PROMPT_TEMPLATE = '''
### Task Description
Write a Python function that {instruction}. Your function should adhere to Google's Python Style Guide (https://google.github.io/styleguide/pyguide.html) and incorporate the following principles for high-quality, maintainable code:

- **Modularity**: Break down the solution into smaller, reusable components where applicable.
- **Readability**: Use meaningful variable and function names that clearly indicate their purpose or the data they hold.
- **Efficiency**: Optimize for performance where necessary, avoiding unnecessary computations or memory usage.
- **Error Handling**: Include basic error handling to manage potential exceptions or invalid inputs.
- **Documentation**: Provide a comprehensive docstring at the beginning of your function explaining the purpose, parameters, return values, and any exceptions raised.
- **Testing**: Optionally, include a simple example or test case that demonstrates how to call your function and what output to expect.

### Function Template
```python
def your_function_name(your_parameters):
    """A brief description of what the function does.

    Args:
        your_parameters: Explanation of each parameter.

    Returns:
        The return value and its explanation.

    Raises:
        Any exceptions that are raised and why they might occur.
    """
    # Your code here
```

### Example
If the task is to "calculate the factorial of a given number," your submission should look like this:

```python
def factorial(n):
    """Calculate the factorial of a given number n.

    Args:
        n (int): The number for which to calculate the factorial.

    Returns:
        int: The factorial of the number, or a string error message for negative inputs.

    Raises:
        ValueError: If n is negative, since negative numbers do not have factorials.
    """
    if n < 0:
        raise ValueError("Negative numbers do not have factorials.")
    elif n == 0:
        return 1
    else:
        result = 1
        for i in range(1, n + 1):
            result *= i
        return result

# Example usage:
# print(factorial(5))
```
'''

PROMPT_TEMPLATE = '''
### Task Description
Write a Python function that {instruction}. Ensure your code adheres to the following guidelines for quality and maintainability:

- **Modularity**: Break down the solution into smaller, reusable components where applicable.
- **Readability**: Use meaningful variable and function names that clearly indicate their purpose or the data they hold.
- **Efficiency**: Optimize for performance where necessary, avoiding unnecessary computations or memory usage.
- **Error Handling**: Include basic error handling to manage potential exceptions or invalid inputs.
- **Documentation**: Provide a detailed docstring at the beginning of the function following Google's Python Style Guide (https://google.github.io/styleguide/pyguide.html). The docstring should include a brief description of the function's purpose, parameter explanations, return values, and any exceptions that might be raised.
- **Testing**: Optionally, include a simple example or test case that demonstrates how to call your function and what output to expect.

### Your Code
Return your solution in the following format:
```python
def your_function_name(parameters):
    """A one-line description of what the function does.

    Args:
        parameters: Explanation of the parameters.

    Returns:
        The return value and its explanation.

    Raises:
        Any exceptions that are raised and why they might occur.
    """
    # Your code here

# Example usage:
# print(your_function_name(test_input))
```
with no additional text outside the code block.
'''

PROMPT_TEMPLATE = '''
### Task Description
Write a Python function that {instruction}. Ensure your code adheres to the following guidelines for quality and maintainability:

- **Modularity**: Break down the solution into smaller, reusable components where applicable.
- **Readability**: Use meaningful variable and function names that clearly indicate their purpose or the data they hold.
- **Efficiency**: Optimize for performance where necessary, avoiding unnecessary computations or memory usage.
- **Error Handling**: Include basic error handling to manage potential exceptions or invalid inputs.
- **Documentation**: Follow Google's Python Style Guide (https://google.github.io/styleguide/pyguide.html) for docstrings and comments, explaining the logic behind key sections of your code or complex operations.
- **Testing**: Optionally, include a simple example or test case that demonstrates how to call your function and what output to expect.

### Your Code
Return your solution in the following format:
```python
def your_function_name(parameters):
    """A one-line description of what the function does.

    Args:
        parameters: Explanation of each parameter.

    Returns:
        Explanation of the return value.

    Raises:
        Explanation of any exceptions that are raised and why they might occur.
    """
    # Your code here
```

### Example
If the task is to "calculate the factorial of a given number," your submission should look like this:

```python
def factorial(n):
    """Calculate the factorial of a given number n.

    Args:
        n: The non-negative integer to calculate the factorial of.

    Returns:
        The factorial of n, or an error message if n is negative.

    Raises:
        ValueError: If n is negative.

    """
    if n < 0:
        raise ValueError("Error: Negative numbers do not have factorials.")
    elif n == 0:
        return 1
    else:
        result = 1
        for i in range(1, n + 1):
            result *= i
        return result

# Example usage:
# print(factorial(5))
```
'''

PROMPT_TEMPLATE = '''
### Task Description
Write a Python function that {instruction}. Ensure your code adheres to the following guidelines for quality and maintainability:

- **Modularity**: Break down the solution into smaller, reusable components where applicable.
- **Readability**: Use meaningful variable and function names that clearly indicate their purpose or the data they hold.
- **Efficiency**: Optimize for performance where necessary, avoiding unnecessary computations or memory usage.
- **Error Handling**: Include basic error handling to manage potential exceptions or invalid inputs.
- **Documentation**: Follow Google's Python Style Guide (https://google.github.io/styleguide/pyguide.html) for docstrings and comments, explaining the logic behind key sections of your code or complex operations.
- **Testing**: Optionally, include a simple example or test case that demonstrates how to call your function and what output to expect.

### Your Code
Return your solution in the following format:
```python
def your_function_name(parameters):
    """A one-line description of what the function does.

    Args:
        parameters: Explanation of the parameters.

    Returns:
        Explanation of the return value.

    Raises:
        Explanation of any exceptions that are raised and why they might occur.
    """
    # Your code here
```

### Example
If the task is to "calculate the factorial of a given number," your submission should look like this:

```python
def factorial(n):
    """Calculate the factorial of a given number n."""
    if n < 0:
        return "Error: Negative numbers do not have factorials."
    elif n == 0:
        return 1
    else:
        result = 1
        for i in range(1, n + 1):
            result *= i
        return result

# Example usage:
# print(factorial(5))
```
'''

PROMPT_TEMPLATE = '''
### Task Description
Write a Python function that {instruction}. Ensure your code adheres to the following guidelines for quality and maintainability:

- **Modularity**: Break down the solution into smaller, reusable components where applicable.
- **Readability**: Use meaningful variable and function names that clearly indicate their purpose or the data they hold.
- **Efficiency**: Optimize for performance where necessary, avoiding unnecessary computations or memory usage.
- **Error Handling**: Include basic error handling to manage potential exceptions or invalid inputs.
- **Documentation**: Follow Google's Python Style Guide (https://google.github.io/styleguide/pyguide.html) for docstrings and comments, explaining the logic behind key sections of your code or complex operations.
- **Testing**: Optionally, include a simple example or test case that demonstrates how to call your function and what output to expect.

### Your Code
Return your solution in the following format:
```python
def your_function_name(parameters):
    """A one-line description of what the function does.

    Args:
        parameters: Explanation of each parameter.

    Returns:
        The return value and its explanation.

    Raises:
        Any exceptions that are raised and why they might occur.
    """
    # Your code here
```

### Example
If the task is to "calculate the factorial of a given number," your submission should look like this:

```python
def factorial(n):
    """Calculate the factorial of a given number n."""
    if n < 0:
        return "Error: Negative numbers do not have factorials."
    elif n == 0:
        return 1
    else:
        result = 1
        for i in range(1, n + 1):
            result *= i
        return result

# Example usage:
# print(factorial(5))
```
'''

PROMPT_TEMPLATE = '''
### Task Description
Write a Python function that {instruction}. The function should adhere to Google's Python Style Guide (https://google.github.io/styleguide/pyguide.html) and incorporate the following principles for quality and maintainability:

- **Modularity**: Break down the solution into smaller, reusable components where applicable.
- **Readability**: Use meaningful variable and function names that clearly indicate their purpose or the data they hold.
- **Efficiency**: Optimize for performance where necessary, avoiding unnecessary computations or memory usage.
- **Error Handling**: Include basic error handling to manage potential exceptions or invalid inputs.
- **Documentation**: Provide a comprehensive docstring explaining the purpose of the function, its arguments, the return values, and any exceptions that might be raised.
- **Testing**: Optionally, include a simple example or test case that demonstrates how to call your function and what output to expect.

### Your Code
Return your solution in the following format:
```python
def your_function_name(your_parameters):
    """One-line description of what the function does.

    Args:
        your_parameters: Explanation of each parameter.

    Returns:
        Explanation of the return value.

    Raises:
        Explanation of any exceptions that are raised and why they might occur.
    """
    # Your code here

# Example usage:
# print(your_function_name(your_test_input))
```

### Example
If the task is to "calculate the factorial of a given number," your submission should look like this:

```python
def factorial(n):
    """Calculate the factorial of a given number n.

    Args:
        n: The non-negative integer to calculate the factorial of.

    Returns:
        The factorial of n, or a string error message if n is negative.

    Raises:
        ValueError: If n is negative.

    """
    if n < 0:
        raise ValueError("Error: Negative numbers do not have factorials.")
    elif n == 0:
        return 1
    else:
        result = 1
        for i in range(1, n + 1):
            result *= i
        return result

# Example usage:
# print(factorial(5))
```
'''

PROMPT_TEMPLATE = '''
### Task Description
Write a Python function that {instruction}. Ensure your code adheres to the following guidelines for quality and maintainability:

- **Modularity**: Break down the solution into smaller, reusable components where applicable.
- **Readability**: Use meaningful variable and function names that clearly indicate their purpose or the data they hold.
- **Efficiency**: Optimize for performance where necessary, avoiding unnecessary computations or memory usage.
- **Error Handling**: Include basic error handling to manage potential exceptions or invalid inputs.
- **Documentation**: Provide a docstring following Google's Python Style Guide (https://google.github.io/styleguide/pyguide.html) explaining the function's purpose, parameters, return values, and any exceptions it might raise.
- **Testing**: Optionally, include a simple example or test case that demonstrates how to call your function and what output to expect.

### Your Code
Return your solution in the following format:
```python
def your_function_name(your_parameters):
    """A one-line description of what the function does.

    Args:
        your_parameters: Explanation of each parameter.

    Returns:
        The return value and its explanation.

    Raises:
        Any exceptions that are raised and why they might occur.
    """
    # Your code here

# Example usage:
# print(your_function_name(your_test_input))
```
with no additional text outside the code block.
'''

PROMPT_TEMPLATE = '''
### Task Description
Write a Python function that {instruction}. Ensure your code adheres to the following guidelines for quality and maintainability:

- **Modularity**: Break down the solution into smaller, reusable components where applicable.
- **Readability**: Use meaningful variable and function names that clearly indicate their purpose or the data they hold.
- **Efficiency**: Optimize for performance where necessary, avoiding unnecessary computations or memory usage.
- **Error Handling**: Include basic error handling to manage potential exceptions or invalid inputs.
- **Documentation**: Provide a detailed docstring at the beginning of your function following Google's Python Style Guide (https://google.github.io/styleguide/pyguide.html). The docstring should include a brief description of the function's purpose, its parameters, the return values, and any exceptions that might be raised.
- **Testing**: Optionally, include a simple example or test case that demonstrates how to call your function and what output to expect.

### Function Template
```python
def your_function_name(parameters):
    """A brief description of what the function does.

    Args:
        parameters: Explanation of each parameter.

    Returns:
        The return value and its explanation.

    Raises:
        Any exceptions that are raised and why they might occur.
    """
    # Your code here
```

### Example
If the task is to "calculate the factorial of a given number," your submission should look like this:

```python
def factorial(n):
    """Calculate the factorial of a given number n.

    Args:
        n: The non-negative integer to calculate the factorial of.

    Returns:
        The factorial of the number, or an error message if the input is negative.

    Raises:
        ValueError: If n is negative.
    """
    if n < 0:
        raise ValueError("Error: Negative numbers do not have factorials.")
    elif n == 0:
        return 1
    else:
        result = 1
        for i in range(1, n + 1):
            result *= i
        return result

# Example usage:
# print(factorial(5))
```
'''

PROMPT_TEMPLATE = '''
### Task Description
Write a Python function that {instruction}. Ensure your code adheres to the following guidelines for quality and maintainability:

- **Modularity**: Break down the solution into smaller, reusable components where applicable.
- **Readability**: Use meaningful variable and function names that clearly indicate their purpose or the data they hold.
- **Efficiency**: Optimize for performance where necessary, avoiding unnecessary computations or memory usage.
- **Error Handling**: Include basic error handling to manage potential exceptions or invalid inputs.
- **Documentation**: Provide a detailed docstring following Google's Python Style Guide (https://google.github.io/styleguide/pyguide.html) explaining the function's purpose, parameters, return values, and any exceptions raised.
- **Testing**: Optionally, include a simple example or test case that demonstrates how to call your function and what output to expect.

### Your Code
Return your solution in the following format:
```python
def your_function_name(your_parameters):
    """A one-line description of what the function does.

    Args:
        your_parameters: Explanation of each parameter.

    Returns:
        Explanation of the return value.

    Raises:
        Explanation of any exceptions that are raised and why they might occur.
    """
    # Your code here
```

### Example
If the task is to "calculate the factorial of a given number," your submission should look like this:

```python
def factorial(n):
    """Calculate the factorial of a given number n.

    Args:
        n: The non-negative integer to calculate the factorial of.

    Returns:
        The factorial of n, or an error message if n is negative.

    Raises:
        ValueError: If n is negative.
    """
    if n < 0:
        raise ValueError("Negative numbers do not have factorials.")
    elif n == 0:
        return 1
    else:
        result = 1
        for i in range(1, n + 1):
            result *= i
        return result

# Example usage:
# print(factorial(5))
```
'''

