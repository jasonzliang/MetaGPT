{"date": "2024-03-29 01:00", "hash": "84f4b93a1270b492e4c54d5212da7a5b", "eval": {"HumanEval/155": [{"task_id": "HumanEval/155", "solution": "def even_odd_count(num):\n    num = str(abs(num))\n    even = 0\n    odd = 0\n    for digit in num:\n        if int(digit) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd) ", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/152": [{"task_id": "HumanEval/152", "solution": "\ndef compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(guess, game)]\n    ", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/163": [{"task_id": "HumanEval/163", "solution": "def generate_integers(a, b):\n    if a > b:\n        a, b = b, a\n        \n    return [i for i in range(a, b + 1) if i % 2 == 0]\n\nprint(generate_integers(2, 8))\nprint(generate_integers(8, 2))\nprint(generate_integers(10, 14)) ", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/108": [{"task_id": "HumanEval/108", "solution": "\ndef count_nums(arr):\n    return sum(sum(int(digit) for digit in str(abs(n))) > 0 for n in arr)\n    ", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[-1, -2, 0]]], "plus_fail_tests": [[[-1, 0, 1]]]}], "HumanEval/137": [{"task_id": "HumanEval/137", "solution": "\ndef compare_one(a, b):\n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n    \n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1, "2,3"]], "plus_fail_tests": [["-4,1", "-4.0"]]}], "HumanEval/4": [{"task_id": "HumanEval/4", "solution": "\n    from typing import List\n    def mean_absolute_deviation(numbers: List[float]) -> float:\n        n = len(numbers)\n        if n == 0:\n            return 0.0\n        mean = sum(numbers) / n\n        absolute_differences = [abs(x - mean) for x in numbers]\n        mad = sum(absolute_differences) / n\n        return mad\n    ", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/106": [{"task_id": "HumanEval/106", "solution": "\ndef factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\ndef f(n):\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(i+1)))\n    return result\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/101": [{"task_id": "HumanEval/101", "solution": "def words_string(s):\n    return s.replace(',', '').split() ", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["Elephant,giraffe,,lion,zebra"]]}], "HumanEval/162": [{"task_id": "HumanEval/162", "solution": "\nimport hashlib\n\ndef string_to_md5(text):\n    if text == \"\":\n        return None\n    else:\n        result = hashlib.md5(text.encode())\n        return result.hexdigest()\n    ", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/3": [{"task_id": "HumanEval/3", "solution": "\ndef below_zero(operations):\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/153": [{"task_id": "HumanEval/153", "solution": "\ndef Strongest_Extension(class_name, extensions):\n    def strength(ext):\n        return sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower())\n\n    strongest = max(extensions, key=strength)\n    return f'{class_name}.{strongest}'\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/154": [{"task_id": "HumanEval/154", "solution": "\ndef cycpattern_check(a , b):\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["", ""]]}], "HumanEval/2": [{"task_id": "HumanEval/2", "solution": "def truncate_number(number: float) -> float:\n    return number - int(number)\n\nprint(truncate_number(3.5)) ", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/107": [{"task_id": "HumanEval/107", "solution": "def is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\ndef even_odd_palindrome(n):\n    count_even = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n    return (count_even, count_odd) ", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/138": [{"task_id": "HumanEval/138", "solution": "def is_equal_to_sum_even(n):\n    if n < 16 or n % 2 != 0:\n        return False\n    else:\n        return True ", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[8]], "plus_fail_tests": [[8]]}], "HumanEval/130": [{"task_id": "HumanEval/130", "solution": "\ndef tribonacci(n):\n    if n == 0: return []\n    elif n == 1: return [3]\n    elif n == 2: return [3, 1]\n    else:\n        seq = [3, 1, 2]\n        for i in range(3, n+1):\n            if i % 2 == 0:\n                seq.append(seq[i-1] + seq[i-2] + seq[i-3])\n            else:\n                seq.append(1 + i // 2)\n        return seq\n    ", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/139": [{"task_id": "HumanEval/139", "solution": "def special_factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n+1):\n            temp = i\n            while temp > 0:\n                result *= temp\n                temp -= 1\n        return result\n\nprint(special_factorial(4)) ", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[500]]}], "HumanEval/5": [{"task_id": "HumanEval/5", "solution": "\ndef intersperse(numbers, delimeter):\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/136": [{"task_id": "HumanEval/136", "solution": "\ndef largest_smallest_integers(lst):\n    negatives = [i for i in lst if i < 0]\n    positives = [i for i in lst if i > 0]\n    return (max(negatives) if negatives else None, min(positives) if positives else None)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/131": [{"task_id": "HumanEval/131", "solution": "\ndef digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product if product > 1 else 0\n    ", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[120]], "plus_fail_tests": [[111]]}], "HumanEval/109": [{"task_id": "HumanEval/109", "solution": "\ndef move_one_ball(arr):\n    if not arr or len(arr) == 1:\n        return True\n    count = 0\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            count += 1\n    if arr[-1] > arr[0]:\n        count += 1\n    return count <= 1\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/20": [{"task_id": "HumanEval/20", "solution": "\n    def find_closest_elements(numbers):\n        numbers.sort()\n        closest = (numbers[0], numbers[1])\n        min_difference = abs(numbers[0] - numbers[1])\n        \n        for i in range(1, len(numbers) - 1):\n            difference = abs(numbers[i] - numbers[i + 1])\n            \n            if difference < min_difference:\n                closest = (numbers[i], numbers[i + 1])\n                min_difference = difference\n                \n        return closest\n    ", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/100": [{"task_id": "HumanEval/100", "solution": "\ndef make_a_pile(n):\n    pile = [n]\n    while n > 0:\n        if n % 2 == 0:\n            n += 1\n        else:\n            n += 2\n        pile.append(n)\n    return pile[1:]\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/27": [{"task_id": "HumanEval/27", "solution": "def flip_case(string):\n    return string.swapcase() ", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/18": [{"task_id": "HumanEval/18", "solution": "def how_many_times(string: str, substring: str) -> int:\n    count = start = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos != -1:\n            count += 1\n            start = pos + 1\n        else:\n            break\n    return count ", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/16": [{"task_id": "HumanEval/16", "solution": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower())) ", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/11": [{"task_id": "HumanEval/11", "solution": "\ndef string_xor(a: str, b: str) -> str:\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/29": [{"task_id": "HumanEval/29", "solution": "\n    return [s for s in strings if s.startswith(prefix)]\n    ", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/42": [{"task_id": "HumanEval/42", "solution": "\n    def incr_list(l):\n        return [i+1 for i in l]\n    ", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/89": [{"task_id": "HumanEval/89", "solution": "\ndef encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 65 if char.isupper() else 97\n            encrypted_char = chr((ord(char) - ascii_offset + 2*2) % 26 + ascii_offset)\n            result += encrypted_char\n        else:\n            result += char\n    return result\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/87": [{"task_id": "HumanEval/87", "solution": "\ndef get_row(lst, x):\n    result = []\n    for i in range(len(lst)):\n        row = lst[i]\n        for j in range(len(row)):\n            if row[j] == x:\n                result.append((i, j))\n    return sorted(result, key=lambda tup: (-tup[0], -tup[1]))\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[[1, 1], [1, 2, 3], [4, 5, 6, 7]], 1]]}], "HumanEval/45": [{"task_id": "HumanEval/45", "solution": "\n    def triangle_area(a, h):\n        return (0.5 * a * h)\n    ", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/73": [{"task_id": "HumanEval/73", "solution": "def smallest_change(arr):\n    n = len(arr)\n    changes = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-1-i]:\n            changes += 1\n    return changes\n\nprint(smallest_change([1,2,3,5,4,7,9,6])) # 4\nprint(smallest_change([1, 2, 3, 4, 3, 2, 2])) # 1\nprint(smallest_change([1, 2, 3, 2, 1])) # 0 ", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/80": [{"task_id": "HumanEval/80", "solution": "\ndef is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/17": [{"task_id": "HumanEval/17", "solution": "\ndef parse_music(music_string):\n    music_dict = {'o': 4, 'o|': 2, '.|': 1}\n    return [music_dict[note.strip()] for note in music_string.split(' ')]\n    ```\n    ", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/74": [{"task_id": "HumanEval/74", "solution": "\ndef total_match(lst1, lst2):\n    sum1 = sum([len(i) for i in lst1])\n    sum2 = sum([len(i) for i in lst2])\n    if sum1 <= sum2:\n        return lst1\n    else:\n        return lst2\n    ", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/28": [{"task_id": "HumanEval/28", "solution": "\ndef concatenate(strings):\n    return ''.join(strings)\n    ", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/10": [{"task_id": "HumanEval/10", "solution": "\ndef make_palindrome(string: str) -> str:\n    for i in range(len(string), 0, -1):\n        if string[:i] == string[i-1::-1]:\n            return string + string[:i-1:-1]\n    return string + string[::-1]\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["xyz"]], "plus_fail_tests": []}], "HumanEval/21": [{"task_id": "HumanEval/21", "solution": "\n    def rescale_to_unit(numbers):\n        min_val = min(numbers)\n        max_val = max(numbers)\n        range_val = max_val - min_val\n        return [(x - min_val) / range_val for x in numbers]\n    ", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/26": [{"task_id": "HumanEval/26", "solution": "\ndef remove_duplicates(numbers):\n    result = []\n    for number in numbers:\n        if number not in result:\n            result.append(number)\n    return result\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3, 2, 4, 3, 5]]], "plus_fail_tests": []}], "HumanEval/19": [{"task_id": "HumanEval/19", "solution": "\ndef sort_numbers(numbers):\n    nums = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    }\n    \n    num_list = numbers.split()\n    num_list.sort(key=lambda x: nums[x])\n    \n    return ' '.join(num_list)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/75": [{"task_id": "HumanEval/75", "solution": "\ndef is_multiply_prime(a):\n    primes = [2, 3, 5, 7]\n    factors = []\n    for prime in primes:\n        while a % prime == 0:\n            factors.append(prime)\n            a /= prime\n    return len(factors) == 3 and all(factors.count(i) == [2, 3, 5].count(i) for i in set(factors))\n    ```\n    ```python\nprint(is_multiply_prime(30)) # True\nprint(is_multiply_prime(15)) # False\nprint(is_multiply_prime(210)) # True\nprint(is_multiply_prime(70)) # False\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/81": [{"task_id": "HumanEval/81", "solution": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa >= 3.7:\n            letter_grades.append('A')\n        elif gpa >= 3.3:\n            letter_grades.append('A-')\n        elif gpa >= 3.0:\n            letter_grades.append('B+')\n        elif gpa >= 2.7:\n            letter_grades.append('B')\n        elif gpa >= 2.3:\n            letter_grades.append('B-')\n        elif gpa >= 2.0:\n            letter_grades.append('C+')\n        elif gpa >= 1.7:\n            letter_grades.append('C')\n        elif gpa >= 1.3:\n            letter_grades.append('C-')\n        elif gpa >= 1.0:\n            letter_grades.append('D+')\n        elif gpa >= 0.7:\n            letter_grades.append('D')\n        elif gpa >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades ", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/44": [{"task_id": "HumanEval/44", "solution": "def change_base(x: int, base: int):\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1]) ", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/72": [{"task_id": "HumanEval/72", "solution": "\ndef will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/86": [{"task_id": "HumanEval/86", "solution": "\ndef anti_shuffle(s):\n    return \" \".join(\"\".join(sorted(word)) for word in s.split())\n    ", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["\n\n123 456\n789\n"]]}], "HumanEval/88": [{"task_id": "HumanEval/88", "solution": "\ndef sort_array(arr):\n    if not arr:\n        return []\n    new_arr = arr[:]\n    if (new_arr[0] + new_arr[-1]) % 2 == 0:\n        new_arr.sort(reverse=True)\n    else:\n        new_arr.sort()\n    return new_arr\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/43": [{"task_id": "HumanEval/43", "solution": "def pairs_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False ", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/95": [{"task_id": "HumanEval/95", "solution": "\ndef check_dict_case(d):\n    if not d:  # If the dictionary is empty\n        return False\n    case = None\n    for key in d.keys():\n        if type(key) != str:  # If a non-string key is found\n            return False\n        if case is None:  # Set the case based on the first key\n            case = key.islower()\n        elif (case and not key.islower()) or (not case and not key.isupper()):  # If the case doesn't match\n            return False\n    return True\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[{"8": "banana"}]]}], "HumanEval/66": [{"task_id": "HumanEval/66", "solution": "\ndef digitSum(s):\n    return sum([ord(c) for c in s if c.isupper()])\n    ", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/61": [{"task_id": "HumanEval/61", "solution": "def correct_bracketing(brackets):\n    count = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count += 1\n        elif bracket == ')':\n            count -= 1\n        if count < 0:  # closing bracket before opening one\n            return False\n    return count == 0  # all brackets should be closed", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/59": [{"task_id": "HumanEval/59", "solution": "def largest_prime_factor(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n ", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/92": [{"task_id": "HumanEval/92", "solution": "\ndef any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x == y + z or y == x + z or z == x + y\n    else:\n        return False\n    ", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/57": [{"task_id": "HumanEval/57", "solution": "def monotonic(l):\n    return (all(x<y for x, y in zip(l, l[1:])) or\n            all(x>y for x, y in zip(l, l[1:]))) ", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[4, 1, 1, 0]]], "plus_fail_tests": [[[1, 1, 1, 1, 1]]]}], "HumanEval/68": [{"task_id": "HumanEval/68", "solution": "\ndef pluck(arr):\n    even_values = [i for i in arr if i % 2 == 0]\n    if not even_values:\n        return []\n    smallest_even_value = min(even_values)\n    index = arr.index(smallest_even_value)\n    return [smallest_even_value, index]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/50": [{"task_id": "HumanEval/50", "solution": "\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/35": [{"task_id": "HumanEval/35", "solution": "\n    def max_element(l):\n        return max(l)\n    ", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/32": [{"task_id": "HumanEval/32", "solution": "\ndef find_zero(xs):\n    n = len(xs)\n    a = xs[n-2]\n    b = xs[n-1]\n    return -b/a\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/69": [{"task_id": "HumanEval/69", "solution": "\ndef search(lst):\n    from collections import Counter\n    counter = Counter(lst)\n    for num in sorted(counter.keys(), reverse=True):\n        if num <= counter[num]:\n            return num\n    return -1\n    ", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/51": [{"task_id": "HumanEval/51", "solution": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels]) ", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/56": [{"task_id": "HumanEval/56", "solution": "def correct_bracketing(brackets):\n    count = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count += 1\n        elif bracket == '>':\n            if count == 0:\n                return False\n            count -= 1\n    return count == 0 ", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/67": [{"task_id": "HumanEval/67", "solution": "def fruit_distribution(s,n):\n    s = s.split()\n    total_fruits = int(s[0]) + int(s[2]) + int(s[4])\n    return n - total_fruits", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/93": [{"task_id": "HumanEval/93", "solution": "\ndef encode(message):\n    vowels = 'aeiouAEIOU'\n    encoded_msg = ''\n    for char in message:\n        if char.isalpha():\n            # Swap case and replace vowel\n            if char in vowels:\n                new_char = chr((ord(char) - ord('a') + 2) % 26 + ord('a')) if char.islower() else chr((ord(char) - ord('A') + 2) % 26 + ord('A'))\n            else:\n                new_char = char.upper() if char.islower() else char.lower()\n        else:\n            # Keep non-letter characters as is\n            new_char = char\n        encoded_msg += new_char\n    return encoded_msg\n```\nThis function works by iterating over each character in the message. If the character is a letter, it checks if it's a vowel or not. If it's a vowel, it replaces it with the 2 places ahead letter in the alphabet (wrapping around to 'a'/'A' if necessary). Otherwise, it swaps its case. Non-letter characters are kept as is. The encoded message is then returned.\n\nHere are some examples of how this function works:\n```python\nprint(encode('test'))  # Outputs: 'TGST'\nprint(encode('This is a message'))  # Outputs: 'tHKS KS C MGSSCGG'\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/58": [{"task_id": "HumanEval/58", "solution": "\ndef common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))\n    ", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/94": [{"task_id": "HumanEval/94", "solution": "\ndef is_prime(n):\n    if n <= 1 or (n % 2 == 0 and n > 2): \n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef largest_prime_sum(lst):\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return None\n    max_prime = max(primes)\n    return sum(int(digit) for digit in str(max_prime))\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/60": [{"task_id": "HumanEval/60", "solution": "def sum_to_n(n):\n    return n * (n + 1) // 2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/33": [{"task_id": "HumanEval/33", "solution": "\ndef sort_third(l):\n    thirds = sorted([x for i, x in enumerate(l) if i % 3 == 0])\n    j = 0\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l[i] = thirds[j]\n            j += 1\n    return l\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/34": [{"task_id": "HumanEval/34", "solution": "\n    def unique(l):\n        return sorted(set(l))\n    ", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/114": [{"task_id": "HumanEval/114", "solution": "def minSubArraySum(nums):\n    current_sum = nums[0]\n    min_sum = nums[0]\n\n    for i in range(1, len(nums)):\n        current_sum = min(current_sum + nums[i], nums[i])\n        min_sum = min(min_sum, current_sum)\n    \n    return min_sum ", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/125": [{"task_id": "HumanEval/125", "solution": "\n    def split_words(txt):\n        if ' ' in txt:\n            return txt.split(' ')\n        elif ',' in txt:\n            return txt.split(',')\n        else:\n            count = 0\n            for char in txt:\n                if char.islower() and (ord(char) - ord('a')) % 2 == 1:\n                    count += 1\n            return count\n    ```\n    ", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/113": [{"task_id": "HumanEval/113", "solution": "def odd_count(lst):\n    result = []\n    for i in range(len(lst)):\n        count = 0\n        for digit in lst[i]:\n            if int(digit) % 2 != 0:\n                count += 1\n        result.append(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(count, count, count, count))\n    return result ", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/122": [{"task_id": "HumanEval/122", "solution": "\ndef add_elements(arr, k):\n    return sum([i for i in arr[:k] if 0 <= i <= 99])\n    ", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[-4, 5, 67, 34, 56, 12, 89, 23, 45], 7]]}], "HumanEval/149": [{"task_id": "HumanEval/149", "solution": "\ndef sorted_list_sum(lst):\n    # Filter out strings of odd length\n    lst = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list by length and then alphabetically\n    lst.sort(key=lambda x: (len(x), x))\n    return lst\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/123": [{"task_id": "HumanEval/123", "solution": "\ndef get_odd_collatz(n):\n    collatz = []\n    while n != 1:\n        collatz.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    collatz.append(1)\n    \n    return sorted([num for num in set(collatz) if num % 2 != 0])\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/140": [{"task_id": "HumanEval/140", "solution": "def fix_spaces(text):\n    text = list(text)\n    i = 0\n    while i < len(text):\n        if text[i] == ' ':\n            j = i + 1\n            while j < len(text) and text[j] == ' ':\n                j += 1\n            if j - i > 2:\n                text[i] = '-'\n            else:\n                text[i] = '_'\n            del text[i+1:j]\n        i += 1\n    return ''.join(text)\n\nprint(fix_spaces(\"Example\")) # \"Example\"\nprint(fix_spaces(\"Example 1\")) # \"Example_1\"\nprint(fix_spaces(\" Example 2\")) # \"_Example_2\"\nprint(fix_spaces(\" Example  3\")) # \"_Example-3\" ", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["Yellow Yellow  Dirty  Fellow"]], "plus_fail_tests": [["  spaces  every  where  "]]}], "HumanEval/124": [{"task_id": "HumanEval/124", "solution": "\nimport re\nfrom datetime import datetime\n\ndef valid_date(date):\n    if not date:  # check if the string is empty\n        return False\n        \n    try:\n        res = bool(re.match(r'\\d{2}-\\d{2}-\\d{4}', date))  # check if the format is correct\n        if not res:\n            return False\n            \n        day, month, year = map(int, date.split('-'))  # split the string into day, month and year\n        \n        datetime(year, month, day)  # this will throw an error if the date is invalid\n    except ValueError:\n        return False\n    \n    return True\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["15-01-2012"]], "plus_fail_tests": []}], "HumanEval/112": [{"task_id": "HumanEval/112", "solution": "\ndef reverse_delete(s, c):\n    s = ''.join([i for i in s if i not in c])\n    return (s, s == s[::-1])\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/115": [{"task_id": "HumanEval/115", "solution": "\ndef max_fill(grid, capacity):\n    # Initialize the total water and the number of times to lower the buckets.\n    total_water = sum([sum(row) for row in grid])\n    num_lowers = 0\n\n    # While there is still water left, lower the bucket and fill it up.\n    while total_water > 0:\n        total_water -= capacity\n        num_lowers += 1\n    \n    return num_lowers if total_water == 0 else num_lowers - 1\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2]], "plus_fail_tests": []}], "HumanEval/141": [{"task_id": "HumanEval/141", "solution": "\ndef file_name_check(file_name):\n    # Split the filename into name and extension\n    name, ext = file_name.split('.')\n    \n    # Check if there are more than 3 digits in the name\n    if sum(c.isdigit() for c in name) > 3:\n        return 'No'\n        \n    # Check if the name starts with a letter from the latin alphabet\n    if not name[0].isalpha():\n        return 'No'\n    \n    # Check if the extension is one of ['txt', 'exe', 'dll']\n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n        \n    return 'Yes'\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["this_is_12valid.6exe4.txt"]], "plus_fail_tests": [["alice.123.txt"]]}], "HumanEval/146": [{"task_id": "HumanEval/146", "solution": "\ndef specialFilter(nums):\n    def isOddDigit(n):\n        return int(str(n)[0]) % 2 != 0 and int(str(n)[-1]) % 2 != 0\n\n    count = 0\n    for num in nums:\n        if num > 10 and isOddDigit(num):\n            count += 1\n    return count\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/148": [{"task_id": "HumanEval/148", "solution": "\ndef bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n        index1 = planets.index(planet1)\n        index2 = planets.index(planet2)\n        if index1 < index2:\n            return tuple(planets[index1+1 : index2])\n        else:\n            return tuple(planets[index2+1 : index1])\n    ", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/134": [{"task_id": "HumanEval/134", "solution": "\ndef check_if_last_char_is_a_letter(txt):\n    if not txt or not txt[-1].isalpha():\n        return False\n    else:\n        words = txt.split()\n        last_word = words[-1]\n        return last_word[-1] == txt[-1]\n    ", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["pUMPKIN PIE"]]}], "HumanEval/133": [{"task_id": "HumanEval/133", "solution": "\ndef sum_squares(lst):\n    return sum([int(x)**2 for x in map(math.ceil, lst)])\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/9": [{"task_id": "HumanEval/9", "solution": "def rolling_max(numbers):\n    max_list = []\n    current_max = numbers[0]\n    for num in numbers:\n        if num > current_max:\n            current_max = num\n        max_list.append(current_max)\n    return max_list ", "base_status": "fail", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/105": [{"task_id": "HumanEval/105", "solution": "\ndef by_length(arr):\n    nums = [\"Zero\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    return [nums[i] for i in sorted([n for n in arr if 1 <= n <= 9])[::-1]]\n    ```\n    ", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/102": [{"task_id": "HumanEval/102", "solution": "def choose_num(x, y):\n    for i in range(y, x-1, -1):\n        if i % 2 == 0:\n            return i\n    return -1\n\nprint(choose_num(12, 15)) # Outputs: 14\nprint(choose_num(13, 12)) # Outputs: -1 ", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/0": [{"task_id": "HumanEval/0", "solution": "\n    def has_close_elements(numbers: List[float], threshold: float) -> bool:\n        for i in range(len(numbers)):\n            for j in range(i+1, len(numbers)):\n                if abs(numbers[i] - numbers[j]) < threshold:\n                    return True\n        return False\n    ", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/7": [{"task_id": "HumanEval/7", "solution": "\n    return [s for s in strings if substring in s]\n    ", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/156": [{"task_id": "HumanEval/156", "solution": "\ndef int_to_mini_roman(number):\n    val = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    syb = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/151": [{"task_id": "HumanEval/151", "solution": "\ndef double_the_difference(lst):\n    return sum([i**2 for i in lst if isinstance(i, int) and i % 2 != 0])\n    ", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[-1, -2, 8]]], "plus_fail_tests": [[[-5, 7, 9]]]}], "HumanEval/160": [{"task_id": "HumanEval/160", "solution": "\ndef do_algebra(operator, operand):\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += ' ' + operator[i] + ' ' + str(operand[i+1])\n    return eval(expression)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/158": [{"task_id": "HumanEval/158", "solution": "\ndef find_max(words):\n    max_unique = 0\n    max_word = ''\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique or (unique_chars == max_unique and word < max_word):\n            max_unique = unique_chars\n            max_word = word\n    return max_word\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/104": [{"task_id": "HumanEval/104", "solution": "\ndef unique_digits(x):\n    return sorted([i for i in x if all(int(j) % 2 != 0 for j in str(i))])\n    ", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/6": [{"task_id": "HumanEval/6", "solution": "\ndef parse_nested_parens(paren_string):\n    return [max([len(i) for i in paren.split(')') if i]) for paren in paren_string.split()]\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["(()(())((())))"]], "plus_fail_tests": [["(()()(((())))(()(())))()"]]}], "HumanEval/103": [{"task_id": "HumanEval/103", "solution": "\ndef rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)\n    ", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/135": [{"task_id": "HumanEval/135", "solution": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1\n\nprint(can_arrange([1,2,4,3,5])) # Output: 3\nprint(can_arrange([1,2,3])) # Output: -1 ", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/1": [{"task_id": "HumanEval/1", "solution": "\ndef separate_paren_groups(paren_string):\n    paren_string = paren_string.replace(\" \", \"\")\n    stack = []\n    result = []\n    temp = \"\"\n\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            temp += char\n        elif char == ')':\n            stack.pop()\n            temp += char\n            if not stack:\n                result.append(temp)\n                temp = \"\"\n    return result\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/8": [{"task_id": "HumanEval/8", "solution": "\ndef sum_product(numbers):\n    if not numbers:\n        return (0, 1)\n    else:\n        total_sum = sum(numbers)\n        product = 1\n        for num in numbers:\n            product *= num\n        return (total_sum, product)\n    ", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/132": [{"task_id": "HumanEval/132", "solution": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack or (stack and stack[-1] != '['):\n                return True\n            else:\n                stack.pop()\n    return False ", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/161": [{"task_id": "HumanEval/161", "solution": "\ndef solve(s):\n    if any(char.isalpha() for char in s):\n        return ''.join([char.lower() if char.isupper() else char.upper() for char in s])\n    else:\n        return s[::-1]\n    ", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/159": [{"task_id": "HumanEval/159", "solution": "\ndef eat(number, need, remaining):\n    total = number + min(need, remaining)\n    left = max(0, remaining - need)\n    return [total, left]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/157": [{"task_id": "HumanEval/157", "solution": "\ndef right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[2]**2 == sides[0]**2 + sides[1]**2\n    ", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/150": [{"task_id": "HumanEval/150", "solution": "\ndef is_prime(n):\n    if n <= 1 or (n % 2 == 0 and n > 2): \n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y\n```\n    ", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/46": [{"task_id": "HumanEval/46", "solution": "def fib4(n):\n    if n < 2:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(3, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d\n\nprint(fib4(5)) # Output: 4\nprint(fib4(6)) # Output: 8\nprint(fib4(7)) # Output: 14 ", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[3]]}], "HumanEval/79": [{"task_id": "HumanEval/79", "solution": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]  # Convert to binary and remove the '0b' prefix\n    return \"db\" + binary + \"db\" ", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/41": [{"task_id": "HumanEval/41", "solution": "def car_race_collision(n: int) -> int:\n    return n * (n-1) // 2 if n > 0 else 0 ", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/77": [{"task_id": "HumanEval/77", "solution": "\ndef iscube(a):\n    return round(abs(a) ** (1. / 3)) ** 3 == abs(a)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/48": [{"task_id": "HumanEval/48", "solution": "def is_palindrome(text: str):\n    return text == text[::-1] ", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/83": [{"task_id": "HumanEval/83", "solution": "def starts_one_ends(n):\n    if n == 1:\n        return 2\n    else:\n        return 10**(n-1)*2 - 9*starts_one_ends(n-1)\n\nprint(starts_one_ends(3)) ", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/84": [{"task_id": "HumanEval/84", "solution": "def solve(N):\n    return bin(sum(int(digit) for digit in str(N)))[2:] ", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/70": [{"task_id": "HumanEval/70", "solution": "\ndef strange_sort_list(lst):\n    result = []\n    while lst:\n        min_val = min(lst)\n        max_val = max(lst)\n        result.append(min_val)\n        if min_val != max_val:\n            result.append(max_val)\n        lst.remove(min_val)\n        if min_val != max_val:\n            lst.remove(max_val)\n    return result\n    ", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/23": [{"task_id": "HumanEval/23", "solution": "def strlen(string: str) -> int:\n    return len(string) ", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/147": [{"task_id": "HumanEval/147", "solution": "\ndef get_max_triples(n):\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            for k in range(j+1, len(a)):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n    ", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/85": [{"task_id": "HumanEval/85", "solution": "\ndef add(lst):\n    return sum(val for idx, val in enumerate(lst) if idx % 2 != 0 and val % 2 == 0)\n    ", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/12": [{"task_id": "HumanEval/12", "solution": "\ndef longest(strings):\n    if not strings:\n        return None\n    else:\n        return max(strings, key=len)\n    ", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/71": [{"task_id": "HumanEval/71", "solution": "\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2.0\n        return round((s * (s - a) * (s - b) * (s - c)) ** 0.5, 2)\n    else:\n        return -1\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/24": [{"task_id": "HumanEval/24", "solution": "def largest_divisor(n):\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\nprint(largest_divisor(15)) ", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/82": [{"task_id": "HumanEval/82", "solution": "\ndef is_prime(n):\n    if n <= 1 or (n % 2 == 0 and n > 2): \n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    return is_prime(len(string))\n```\n```python\nprint(prime_length('Hello')) # Returns: True\nprint(prime_length('abcdcba')) # Returns: True\nprint(prime_length('kittens')) # Returns: True\nprint(prime_length('orange')) # Returns: False\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/76": [{"task_id": "HumanEval/76", "solution": "\ndef is_simple_power(x, n):\n    if x < 1 or n < 2:\n        return False\n    while x % n == 0:\n        x /= n\n    return x == 1\n    ", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1, 1]], "plus_fail_tests": [[1, 1]]}], "HumanEval/49": [{"task_id": "HumanEval/49", "solution": "def modp(n: int, p: int):\n    return pow(2, n, p) ", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/40": [{"task_id": "HumanEval/40", "solution": "\ndef triples_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/47": [{"task_id": "HumanEval/47", "solution": "\n    def median(l):\n        l = sorted(l)\n        n = len(l)\n        m = n - 1\n        return (l[n//2] + l[m//2]) / 2.0\n    ```\n    ", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/78": [{"task_id": "HumanEval/78", "solution": "\ndef hex_key(num):\n    primes = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit.upper() in primes:\n            count += 1\n    return count\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/13": [{"task_id": "HumanEval/13", "solution": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        a, b = b, a % b\n    return abs(a) ", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/14": [{"task_id": "HumanEval/14", "solution": "def all_prefixes(string):\n    return [string[:i] for i in range(1, len(string) + 1)] ", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/22": [{"task_id": "HumanEval/22", "solution": "\n    def filter_integers(values):\n        return [value for value in values if isinstance(value, int)]\n    ", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/25": [{"task_id": "HumanEval/25", "solution": "\ndef factorize(n):\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/38": [{"task_id": "HumanEval/38", "solution": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) +2) // 3)]\n    # undo cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups) ", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/31": [{"task_id": "HumanEval/31", "solution": "def is_prime(n):\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True ", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/65": [{"task_id": "HumanEval/65", "solution": "\ndef circular_shift(x, shift):\n    x = str(x)\n    if shift > len(x):\n        return x[::-1]\n    else:\n        return x[-shift:] + x[:-shift]\n    ", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/91": [{"task_id": "HumanEval/91", "solution": "\ndef is_bored(S):\n    sentences = S.replace('?', '.').replace('!', '.').split('.')\n    return sum([1 for sentence in sentences if sentence.strip().startswith(\"I\")])\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["Is the sky blue?"]], "plus_fail_tests": [["In the morning, I like to have a cup of coffee to start my day off right. How about you?"]]}], "HumanEval/62": [{"task_id": "HumanEval/62", "solution": "def derivative(xs):\n    return [i*x for i, x in enumerate(xs)][1:]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/54": [{"task_id": "HumanEval/54", "solution": "\ndef same_chars(s0: str, s1: str) -> bool:\n    return sorted(s0) == sorted(s1)\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["aaabbbccc", "abbabcbc"]]}], "HumanEval/96": [{"task_id": "HumanEval/96", "solution": "\ndef count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = []\n    for i in range(n):\n        if is_prime(i):\n            primes.append(i)\n            \n    return primes\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/53": [{"task_id": "HumanEval/53", "solution": "def add(x: int, y: int):\n    return x + y ", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/98": [{"task_id": "HumanEval/98", "solution": "\n    def count_upper(s):\n        vowels = 'AEIOU'\n        return sum(1 for i in range(0, len(s), 2) if s[i].isupper() and s[i] in vowels)\n    ", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/37": [{"task_id": "HumanEval/37", "solution": "\ndef sort_even(l):\n    even_indices = sorted([v for i, v in enumerate(l) if i % 2 == 0])\n    result = [None] * len(l)\n    result[::2] = even_indices\n    result[1::2] = l[1::2]\n    return result\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/30": [{"task_id": "HumanEval/30", "solution": "\ndef get_positive(l):\n    return [i for i in l if i > 0]\n    ", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/36": [{"task_id": "HumanEval/36", "solution": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += str(i).count('7')\n    return count ", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/52": [{"task_id": "HumanEval/52", "solution": "\ndef below_threshold(l: list, t: int):\n    return all(i < t for i in l)\n    ", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/99": [{"task_id": "HumanEval/99", "solution": "\ndef closest_integer(value):\n    value = float(value)\n    if value > 0:\n        return int(value + 0.5)\n    else:\n        return int(value - 0.5)\n    ```\n    ", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/63": [{"task_id": "HumanEval/63", "solution": "def fibfib(n):\n    if n < 0:\n        return \"Input should be non-negative\"\n    elif n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c\n\nprint(fibfib(1)) # Outputs: 0\nprint(fibfib(5)) # Outputs: 4\nprint(fibfib(8)) # Outputs: 24 ", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/55": [{"task_id": "HumanEval/55", "solution": "def fib(n):\n    if n <= 0:\n        return \"Input should be positive integer.\"\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a = 0\n        b = 1\n        for i in range(2, n):\n            fib = a + b\n            a, b = b, fib\n        return b\n\nprint(fib(10)) # Outputs: 34\nprint(fib(1)) # Outputs: 0\nprint(fib(8)) # Outputs: 13", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/39": [{"task_id": "HumanEval/39", "solution": "def is_prime(n):\n    if n <= 1 or (n % 2 == 0 and n > 2): \n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef fibonacci(n):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\ndef prime_fib(n):\n    count = 0\n    i = 0\n    while count < n:\n        fib = fibonacci(i)\n        if is_prime(fib):\n            count += 1\n        i += 1\n    return fib ", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[12]]}], "HumanEval/97": [{"task_id": "HumanEval/97", "solution": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10) ", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/90": [{"task_id": "HumanEval/90", "solution": "\ndef next_smallest(lst):\n    if len(set(lst)) <= 1:\n        return None\n    else:\n        lst = sorted(list(set(lst)))\n        return lst[1]\n    ", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/64": [{"task_id": "HumanEval/64", "solution": "\ndef vowels_count(s):\n    count = 0\n    for char in s.lower():\n        if char in 'aeiou':\n            count += 1\n        elif char == 'y' and len(s) > 1 and s[-2].lower() not in 'aeiou':\n            count += 1\n    return count\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["key"]], "plus_fail_tests": [["monkey"]]}], "HumanEval/143": [{"task_id": "HumanEval/143", "solution": "\ndef is_prime(n):\n    if n <= 1 or (n % 2 == 0 and n > 2): \n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/144": [{"task_id": "HumanEval/144", "solution": "\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef simplify(x, n):\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n    \n    product_num = x_num * n_num\n    product_denom = x_denom * n_denom\n    \n    gcd_val = gcd(product_num, product_denom)\n    \n    return (product_num // gcd_val) % (product_denom // gcd_val) == 0\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/110": [{"task_id": "HumanEval/110", "solution": "\ndef exchange(lst1, lst2):\n    # Check if all elements in lst1 are even\n    for num in lst1:\n        if num % 2 != 0:\n            return \"NO\"\n            \n    # Check if there is any odd number in lst2\n    for num in lst2:\n        if num % 2 != 0:\n            return \"YES\"\n    \n    return \"NO\"\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 3, 5], [2, 4, 6]]]}], "HumanEval/128": [{"task_id": "HumanEval/128", "solution": "\ndef prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    summation = 0\n    for num in arr:\n        product *= (num > 0) - (num < 0)\n        summation += abs(num)\n    return product * summation\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/121": [{"task_id": "HumanEval/121", "solution": "\ndef solution(lst):\n    return sum([val for i, val in enumerate(lst) if i % 2 == 0 and val % 2 != 0])\n    ", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/117": [{"task_id": "HumanEval/117", "solution": "\ndef select_words(s, n):\n    vowels = 'aeiou'\n    words = s.split()\n    result = []\n    for word in words:\n        count = 0\n        for char in word:\n            if char.lower() not in vowels:\n                count += 1\n        if count == n:\n            result.append(word)\n    return result\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/126": [{"task_id": "HumanEval/126", "solution": "\ndef is_sorted(lst):\n    return lst == sorted(lst) and len(lst) == len(set(lst))\n    ", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 2, 3, 3, 4]]], "plus_fail_tests": [[[1, 1, 2, 2, 3, 3, 4]]]}], "HumanEval/119": [{"task_id": "HumanEval/119", "solution": "\ndef match_parens(lst):\n    # Concatenate the two strings in some order.\n    s = lst[0] + lst[1]\n    balance = 0\n    for c in s:\n        if c == '(':\n            balance += 1\n        elif c == ')':\n            balance -= 1\n        # If at any point the balance goes negative, it means we have more closing brackets than opening ones.\n        if balance < 0:\n            return 'No'\n    # After going through all characters in s, if the balance is not zero, it means there are unbalanced parentheses.\n    if balance != 0:\n        return 'No'\n    return 'Yes'\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[")())", "(()()("]]], "plus_fail_tests": [[[")()()()(()()))", "(("]]]}], "HumanEval/145": [{"task_id": "HumanEval/145", "solution": "\ndef order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[-5, -12, 9, 15]]]}], "HumanEval/142": [{"task_id": "HumanEval/142", "solution": "def sum_squares(lst):\n    return sum([num**2 if idx%3==0 else num**3 for idx, num in enumerate(lst)]) ", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/118": [{"task_id": "HumanEval/118", "solution": "\ndef get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    for i in range(len(word) - 1, 0, -1):\n        if word[i] not in vowels and word[i-1] in vowels:\n            return word[i-1]\n    return ''\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["easy"]], "plus_fail_tests": [["alb"]]}], "HumanEval/127": [{"task_id": "HumanEval/127", "solution": "\ndef is_prime(n):\n    if n <= 1 or (n % 2 == 0 and n > 2): \n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if start > end:  # If the two intervals don't intersect\n        return \"NO\"\n    \n    length_intersection = end - start + 1\n    return \"YES\" if is_prime(length_intersection) else \"NO\"\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[-1, 1], [0, 4]]], "plus_fail_tests": [[[10, 20], [15, 25]]]}], "HumanEval/129": [{"task_id": "HumanEval/129", "solution": "\ndef minPath(grid, k):\n    N = len(grid)\n    dp = [[[float('inf') for _ in range(k+1)] for _ in range(N*N+1)] for _ in range(N*N+1)]\n    path = [[(0, 0) for _ in range(N*N+1)] for _ in range(N*N+1)]\n    \n    def get_neighbors(i, j):\n        neighbors = []\n        if i > 0:\n            neighbors.append((i-1, j))\n        if i < N - 1:\n            neighbors.append((i+1, j))\n        if j > 0:\n            neighbors.append((i, j-1))\n        if j < N - 1:\n            neighbors.append((i, j+1))\n        return neighbors\n    \n    for i in range(N):\n        for j in range(N):\n            dp[grid[i][j]][1] = 0\n            path[grid[i][j]][1] = (i, j)\n            \n    for l in range(2, k+1):\n        for i in range(1, N*N+1):\n            for j in range(1, N*N+1):\n                if dp[i][l] > dp[j][l-1] + abs(grid[path[j][l-1][0]][path[j][l-1][1]] - i):\n                    dp[i][l] = dp[j][l-1] + abs(grid[path[j][l-1][0]][path[j][l-1][1]] - i)\n                    path[i][l] = (path[j][l-1][0], path[j][l-1][1])\n                for x, y in get_neighbors(path[j][l-1][0], path[j][l-1][1]):\n                    if dp[i][l] > dp[grid[x][y]][l-1] + abs(grid[path[j][l-1][0]][path[j][l-1][1]] - i) + abs(grid[x][y] - grid[path[j][l-1][0]][path[j][l-1][1]]):\n                        dp[i][l] = dp[grid[x][y]][l-1] + abs(grid[path[j][l-1][0]][path[j][l-1][1]] - i) + abs(grid[x][y] - grid[path[j][l-1][0]][path[j][l-1][1]])\n                        path[i][l] = (x, y)\n    \n    min_val = float('inf')\n    for i in range(1, N*N+1):\n        if dp[i][k] < min_val:\n            min_val = dp[i][k]\n            start = i\n            \n    result = [grid[path[start][k][0]][path[start][k][1]]]\n    for l in range(k, 1, -1):\n        result.append(grid[path[result[-1]][l-1][0]][path[result[-1]][l-1][1]])\n    \n    return result[::-1]\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 9]]}], "HumanEval/120": [{"task_id": "HumanEval/120", "solution": "\ndef maximum(arr, k):\n    arr.sort()\n    return arr[-k:]\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3, -23, 243, -400, 0], 0]], "plus_fail_tests": [[[1], 0]]}], "HumanEval/116": [{"task_id": "HumanEval/116", "solution": "\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n    ", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/111": [{"task_id": "HumanEval/111", "solution": "\ndef histogram(test):\n    from collections import Counter\n    letters = test.split()\n    count = Counter(letters)\n    max_count = max(list(count.values()) + [0])\n    return {k: v for k, v in count.items() if v == max_count}\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/15": [{"task_id": "HumanEval/15", "solution": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n+1)) ", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}]}}