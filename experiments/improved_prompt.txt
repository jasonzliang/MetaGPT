PROMPT_TEMPLATE: str = """
### TASK
Write a Python function following Google's Python style guide that accomplishes the following task: {instruction}. Ensure the code is modular, easy to read, and maintainable. Consider edge cases and include appropriate comments to explain complex logic or assumptions.

### REQUIREMENTS
- Follow [Google's Python Style Guide](https://google.github.io/styleguide/pyguide.html).
- The code should be modular, allowing for easy modification and extension.
- Include docstrings for the function and any complex logic.
- Consider edge cases and input validation.
- Use descriptive variable names and keep functions focused on a single task.
- Include two examples of how to call the function with expected outputs in comments.

### YOUR CODE
Return the code snippet within the following format:
```python
# your_code_here
```
Ensure there are NO other texts outside the code block provided above.

Your code:
"""



PROMPT_TEMPLATE: str = """
### TASK
Write a Python function following Google's Python style guide that accomplishes the following task: {instruction}. Ensure the code is modular, easy to read, and maintainable. Include docstrings to describe the function's purpose, parameters, and return value. Use type annotations to improve code readability and maintenance.

### REQUIREMENTS
- Follow Google's Python style guide for formatting and code structure.
- Write modular code: separate the task into smaller functions if necessary.
- Ensure the code is easy to read: use meaningful variable names and keep functions concise.
- Include a docstring at the beginning of the function, explaining what the function does, its parameters, and its return value.
- Use type annotations for function parameters and return types to enhance readability and maintenance.
- Provide two test cases that demonstrate the function's correct operation.

### YOUR CODE
Return the code snippet within triple backticks, using the format ```python your_code_here ```, with no other texts. Your code:
"""



PROMPT_TEMPLATE: str = """
### TASK
Write a Python function following Google's Python style guide that accomplishes the following task: {instruction}. Your function should be modular, easy to read, and maintainable. Consider edge cases and input validation as part of your implementation.

### REQUIREMENTS
- Follow [Google's Python Style Guide](https://google.github.io/styleguide/pyguide.html).
- Ensure your code is modular, allowing for easy modification and extension.
- Write clean, readable code with appropriate variable names and concise comments explaining the logic where necessary.
- Include error handling and input validation to manage unexpected inputs gracefully.
- Consider efficiency and avoid unnecessary computations.

### OUTPUT
Return your code enclosed in triple backticks with the 'python' specifier, like so:
```python
your_code_here
```
Ensure there are no texts outside the code block. Your code:
"""



PROMPT_TEMPLATE: str = """
Write a Python function following Google's Python style guide that accomplishes the following task: {instruction}. Ensure your code is modular, easy to read, and maintainable. Include a brief docstring at the beginning of your function to describe its purpose, parameters, and return value. Also, add inline comments to explain complex or non-obvious parts of your code.

Your code should adhere to the following principles:
- Use meaningful function and variable names.
- Keep functions short and focused on a single task.
- Avoid global variables unless necessary.
- Handle exceptions gracefully where applicable.

Return your code enclosed in triple backticks with the 'python' specifier, like so:
```python
# Your code here
```
Ensure there are NO other texts outside the code block. Your code:
"""



PROMPT_TEMPLATE: str = """
### TASK
Write a Python function that {instruction}. Your function should adhere to the following guidelines:
- Follow Google Python Style Guide: Use descriptive names, and comment generously.
- Ensure modularity: Break down the task into smaller, reusable components if possible.
- Prioritize readability: Write code that is easy for others to read and understand.
- Focus on maintainability: Use clear logic and avoid unnecessary complexity.

### EXAMPLE
Provide an example call to your function and its expected output.

### YOUR CODE
Return your code snippet within the triple backticks below. Include any necessary comments to explain the logic and functionality of your code. Ensure there are no texts outside the backticks other than your code.

```python
# your_code_here
```
"""



PROMPT_TEMPLATE: str = """
Write a Python function following Google's Python style guide that accomplishes the following task: {instruction}. Ensure the code is modular, easy to read, and maintainable. Include docstrings to describe the function's purpose, parameters, and return value. Also, consider edge cases and error handling in your implementation.

Your code should adhere to the following principles:
- Use descriptive names for functions and variables.
- Follow PEP 8 style guidelines for code formatting.
- Write modular code that could be easily extended or modified.
- Include comprehensive docstrings following Google's style guide.
- Implement error handling where necessary.

Return your code enclosed in triple backticks with the 'python' specifier, like so:
```python
your_code_here
```
Ensure there are NO other texts outside the code block. Your code:
"""



PROMPT_TEMPLATE: str = """
### TASK
Write a Python function following Google's Python style guide that accomplishes the following task: {instruction}. Your function should be modular, easy to read, and maintainable. Consider edge cases and input validation as part of your implementation.

### REQUIREMENTS
- Follow [Google's Python Style Guide](https://google.github.io/styleguide/pyguide.html).
- Ensure the code is modular and can be easily extended or modified.
- Write clean, readable code with appropriate variable names and comments.
- Include error handling and input validation.
- Consider efficiency and avoid unnecessary computations.

### OUTPUT
Return your code enclosed in triple backticks with the 'python' specifier, like so:
```python
# your_code_here
```
Ensure there are no texts outside the code block. Provide a brief comment within the code to describe the functionality and any important considerations.

### EXAMPLE
If your task is to 'calculate the sum of a list of numbers', your submission should look like this:
```python
def sum_of_list(numbers):
    # This function calculates the sum of a list of numbers, ensuring input is a list.
    if not isinstance(numbers, list):
        raise ValueError("Input must be a list of numbers.")
    return sum(numbers)
```
"""



PROMPT_TEMPLATE: str = """
    ### TASK
    Write a Python function following Google's Python style guide that accomplishes the following task: {instruction}. Ensure the code is modular, easy to read, and maintainable. Include docstrings to describe the function's purpose, parameters, and return value. Use type hints to improve code readability and maintainability.

    ### REQUIREMENTS
    - Follow Google's Python style guide.
    - Ensure the code is modular, making use of functions or classes as necessary.
    - Write clear and concise docstrings for all functions and classes.
    - Use type hints for function parameters and return types.
    - The code should be efficient and straightforward, avoiding unnecessary complexity.
    - Include error handling to manage potential exceptions.

    ### YOUR CODE
    Return the code snippet enclosed in triple backticks with the language identifier 'python', like so:
    ```python
    # your code here
    ```
    Ensure there are NO other texts outside the code block.
"""



PROMPT_TEMPLATE: str = """
Write a Python function following Google's Python style guide that can {instruction}. Ensure the code is modular, easy to read, and maintainable. Include docstrings to describe the function's purpose, parameters, and return value. Use type hints to improve code readability and maintainability.

Your code should:
- Be well-commented to explain complex logic.
- Follow PEP 8 style guidelines for naming conventions and formatting.
- Include error handling to manage potential exceptions.

Return your code enclosed in triple backticks with the 'python' specifier, like so:
```python
# your code here
```
Ensure there are NO other texts outside the code block.

Your code:
"""



PROMPT_TEMPLATE: str = """
Write a Python function following Google's Python style guide that accomplishes the following task: {instruction}. Ensure the code is modular, easy to read, and maintainable. Include docstrings to describe the function's purpose, parameters, and return value. Use type hints to improve code readability and maintainability.

Your code should be efficient and elegant, demonstrating professional engineering practices. Avoid unnecessary complexity and ensure the function is thoroughly tested with at least two examples demonstrating its correct operation.

Return your code enclosed in triple backticks with the 'python' language specifier, like so:
```python
# your code here
```
Ensure there are no additional texts outside the code block. Your code:
"""



PROMPT_TEMPLATE: str = '''
### Task Description
Write a Python function that {instruction}. Ensure your code adheres to the following guidelines for quality and maintainability:

- **Modularity**: Break down the solution into smaller, reusable components where applicable.
- **Readability**: Use meaningful variable and function names that clearly indicate their purpose or the value they hold.
- **Efficiency**: Optimize for performance where necessary, avoiding unnecessary computations or memory usage.
- **Error Handling**: Include basic error handling to manage potential exceptions or unexpected input.
- **Documentation**: Provide brief comments where necessary to explain the intention behind significant blocks of code or complex logic.

### Code Submission
Return your code in the following format:
\`\`\`python
# Your code here
\`\`\`
Please ensure there is no additional text or instructions outside of the code block.

### Additional Notes
- If external libraries or modules are necessary for your solution, please include import statements within the submitted code.
- Test your code with a few examples to ensure correctness before submission.
'''



PROMPT_TEMPLATE: str = '''
### Task Description
Write a Python function that {instruction}. Ensure your code adheres to the following guidelines for quality and maintainability:

- **Modularity**: The solution should be divided into smaller, reusable components or functions where applicable.
- **Readability**: Code should be easy to read and understand. Use meaningful variable names and include comments explaining the logic where necessary.
- **Efficiency**: Optimize for performance and memory usage without compromising readability.
- **Error Handling**: Include basic error handling to catch potential issues.
- **PEP 8 Compliance**: Follow the PEP 8 style guide for Python code.

### Code Submission
Return your solution in the following format:
\`\`\`python
# Your code here
\`\`\`
Please ensure there is no additional text or comments outside the code block.

### Example
If the task is to "calculate the factorial of a number", your submission should look like this:
\`\`\`python
def calculate_factorial(number):
    if not isinstance(number, int) or number < 0:
        raise ValueError("Input must be a non-negative integer")
    if number == 0 or number == 1:
        return 1
    return number * calculate_factorial(number - 1)
\`\`\`
'''



PROMPT_TEMPLATE: str = '''
### Task Description
Write a Python function that {instruction}. Ensure your code adheres to the following guidelines for quality and maintainability:

- **Modularity**: Break down the solution into smaller, reusable components or functions.
- **Readability**: Use meaningful variable and function names that clearly indicate their purpose or the data they hold.
- **Efficiency**: Optimize for performance where possible, avoiding unnecessary computations or memory usage.
- **Error Handling**: Include basic error handling to manage potential exceptions or unexpected input.
- **Documentation**: Provide brief comments where necessary to explain the intention behind significant blocks of code or complex logic.

### Code Submission
Return your solution in the following format:
\`\`\`python
# Your code here
\`\`\`
Please ensure there is no additional text or instructions outside the code block.

### Additional Notes
- If the task requires external libraries, include import statements within your code block.
- Where applicable, demonstrate the usage of your function with a simple example call after the function definition.

Thank you for contributing to high-quality, maintainable code solutions.
'''



PROMPT_TEMPLATE: str = '''
### Task Description
Write a Python function that {instruction}. Ensure your code adheres to the following guidelines for quality and maintainability:

- **Modularity**: Break down the solution into smaller, reusable components or functions.
- **Readability**: Use meaningful variable and function names that clearly indicate their purpose or the data they hold.
- **Efficiency**: Optimize for performance where applicable, avoiding unnecessary computations.
- **Error Handling**: Include basic error handling to manage potential exceptions or unexpected input.
- **Documentation**: Provide brief comments where necessary to explain the logic or important decisions in your code.

### Code Submission
Return your solution in the following format:
```python
# Your code here
```
Ensure there are no additional texts or comments outside the code block that might confuse the interpretation of your solution.

### Example
If the task is to "calculate the factorial of a given number," your submission should look like this:
```python
def calculate_factorial(number):
    if number < 0:
        return "Error: Negative number"
    elif number == 0:
        return 1
    else:
        factorial = 1
        for i in range(1, number + 1):
            factorial *= i
        return factorial
```
'''



PROMPT_TEMPLATE: str = '''
### Task Description
Write a Python function that {instruction}. Ensure your code adheres to the following guidelines for quality and maintainability:

- **Modularity**: Break down the solution into smaller, reusable components or functions.
- **Readability**: Use meaningful variable and function names that clearly indicate their purpose or the data they hold.
- **Efficiency**: Optimize for performance where applicable, avoiding unnecessary computations or memory usage.
- **Error Handling**: Include basic error handling to manage potential exceptions or unexpected input.
- **Documentation**: Provide brief comments where necessary to explain the intention behind significant blocks of code or complex logic.

### Code Submission
Return your solution in the following format:
\`\`\`python
# Your code here
\`\`\`
Please ensure there are no additional texts or comments outside the code block that might confuse the evaluation process.

### Additional Notes
- If your solution requires external libraries, please include import statements within the code block.
- Test your code with a few examples to ensure it works as expected before submission.
'''



PROMPT_TEMPLATE: str = '''
Write a Python function that {instruction}. Ensure your code adheres to the following guidelines for quality and maintainability:
- Follows PEP 8 style guide for Python.
- Includes docstrings for the function, explaining what it does, its parameters, and its return value.
- Utilizes type hints for function parameters and return type.
- Demonstrates error handling where applicable.
- Is modular, allowing for easy testing and potential reuse in different contexts.
- Includes comments where necessary to explain complex logic or decisions.

Please return your code enclosed in triple backticks as shown below, without including any additional text outside of this format.

Your code:
'''



PROMPT_TEMPLATE: str = '''
### Task Description
Write a Python function that {instruction}. Ensure your code adheres to the following guidelines for quality and maintainability:

- **Modularity**: Break down the solution into smaller, reusable components or functions.
- **Readability**: Use meaningful variable and function names that clearly indicate their purpose or the data they hold.
- **Efficiency**: Optimize for performance where applicable, avoiding unnecessary computations or resource usage.
- **Error Handling**: Include basic error handling to manage potential exceptions or unexpected input.
- **Documentation**: Provide brief comments where necessary to explain the logic or important decisions in your code.

### Code Submission
Return your solution in the following format:
```python
# Your code starts here

# Your code ends here
```
Please ensure there are no texts outside the code block other than this template.

### Additional Notes
- If your solution requires external libraries, please include import statements within the code block.
- Test your function with multiple scenarios to ensure its correctness and robustness.
- Consider the scalability of your solution; it should work efficiently for small as well as large inputs.

'''



PROMPT_TEMPLATE: str = '''
### Task Description
Write a Python function that {instruction}. Ensure your solution is efficient, follows best coding practices, and is easy to read and maintain.

### Function Requirements
- **Function Name**: Please provide a specific function name that clearly describes the task.
- **Parameters**: List all parameters the function should take, including types.
- **Return Type**: Specify the type of value your function will return.

### Example
Provide at least one example call to your function, including the expected output.

### Additional Notes
- Your code should follow PEP 8 style guidelines.
- Include comments where necessary to explain complex logic.
- Consider edge cases and error handling.

### Submission
Return your code in the following format:
```python
# Your code here
```
Please ensure there is no additional text outside the code block.
'''



PROMPT_TEMPLATE: str = '''
### Task Description
Write a Python function that {instruction}. Ensure your solution is efficient, follows best practices, and is well-commented for clarity.

### Function Signature
Please provide a clear function signature at the beginning of your code to help understand the inputs and outputs of your function.

### Code Requirements
1. **Modularity**: Break down your solution into smaller, reusable components/functions where applicable.
2. **Readability**: Use meaningful variable and function names that reflect their purpose in the code.
3. **Efficiency**: Optimize for performance and memory usage if possible.
4. **Error Handling**: Include basic error handling to deal with potential edge cases.
5. **Comments**: Add comments to explain the logic behind key parts of your code, especially if it involves complex algorithms or operations.
6. **Testing**: Provide a few examples of how to call your function with different inputs and what the expected outputs should be.

### Return Format
Return your solution as a code block formatted in Python, like so:
```python
# Your code here
```
Include only your code in the return block, with no additional text outside of it.

### Example
If the task is to "calculate the factorial of a given number," your submission might look something like this:
```python
def factorial(n: int) -> int:
    """Calculate the factorial of a given number n."""
    if n < 0:
        raise ValueError("Factorial is not defined for negative numbers.")
    if n == 0:
        return 1
    return n * factorial(n-1)

# Example usage
print(factorial(5))  # Expected output: 120
```
'''



PROMPT_TEMPLATE: str = '''
# Objective:
# Write a Python function that accomplishes the following task: {instruction}.
# Your function should adhere to best practices in coding, ensuring it is modular, readable, and maintainable.
# Please include comments where necessary to explain sections of your code or logic used.

# Instructions:
# 1. Clearly define the function's purpose and the problem it solves.
# 2. Use descriptive variable names that make the code easy to understand.
# 3. Break down the problem into smaller, manageable components if necessary.
# 4. Include error handling to manage potential exceptions or unexpected input.
# 5. Write a brief docstring for your function, explaining what it does, its parameters, and its return value.

# Return Format:
# Return your code snippet in the following format:
# ```python
# [your_code_here]
# ```
# Ensure there is no additional text outside the code block.

# Example:
# If the instruction is "calculate the factorial of a number," your response should be structured as follows:

```python
def calculate_factorial(number):
    """
    Calculate the factorial of a given number.

    Parameters:
    number (int): The number to calculate the factorial of.

    Returns:
    int: The factorial of the number.
    """
    if not isinstance(number, int) or number < 0:
        raise ValueError("The number must be a non-negative integer.")
    factorial = 1
    for i in range(1, number + 1):
        factorial *= i
    return factorial
```
'''



PROMPT_TEMPLATE: str = '''
### Task Description
Write a Python function that {instruction}. Ensure your code adheres to the following guidelines for quality and maintainability:

- **Modularity**: Design your solution with reusable components or functions.
- **Readability**: Use meaningful variable and function names that reflect their purpose.
- **Efficiency**: Optimize for performance where applicable.
- **Error Handling**: Include basic error handling to catch potential issues.
- **Documentation**: Provide brief comments explaining the logic behind key sections of your code.

### Code Submission
Return your solution in the following format:
```python
# Your code here
```
Ensure there are no additional texts or comments outside the code block provided.

### Additional Notes
- If your solution requires external libraries, please specify.
- Test your function with multiple inputs to ensure reliability.

'''



PROMPT_TEMPLATE: str = '''
### Task Description
Write a Python function that {instruction}. Ensure your code adheres to the following guidelines for quality and maintainability:

- **Modularity**: Break down the solution into smaller, reusable components or functions.
- **Readability**: Use meaningful variable and function names that clearly indicate their purpose or the data they hold.
- **Efficiency**: Optimize for performance where applicable, avoiding unnecessary computations or memory usage.
- **Error Handling**: Include basic error handling to manage potential exceptions or invalid inputs.
- **Documentation**: Provide brief comments or a docstring explaining the logic behind key sections of your code or complex operations.

### Code Submission
Return your solution in the following format:
\`\`\`python
# Your code here
\`\`\`
Please ensure there is no additional text or instructions outside the code block.

### Additional Notes
- If your solution requires external libraries or modules, please specify.
- Test your code with multiple scenarios to ensure reliability and correctness.
- Consider the scalability of your solution for larger datasets or inputs.

'''



PROMPT_TEMPLATE: str = '''
# Objective: Create a Python function to {instruction}.
# The function should adhere to the following principles for high-quality, maintainable code:
# 1. Clarity and Readability: Code should be easy to read and understand.
# 2. Modularity: Break down the problem into smaller, reusable components.
# 3. Efficiency: Optimize for performance where necessary.
# 4. Error Handling: Include appropriate error handling to manage potential exceptions.
# 5. Documentation: Provide clear comments explaining the logic and purpose of the code.

# Please follow the Python PEP 8 style guide for coding standards.

# Example:
# If the instruction is "calculate the factorial of a number",
# your submission should look like this:

Return ```python
def calculate_factorial(number):
    """
    Calculate the factorial of a given number.

    Args:
    number (int): The number to calculate the factorial of.

    Returns:
    int: The factorial of the number.
    """
    if not isinstance(number, int) or number < 0:
        raise ValueError("The number must be a non-negative integer.")
    if number == 0 or number == 1:
        return 1
    return number * calculate_factorial(number - 1)
```

# Note: Replace the instruction placeholder with the specific task you are asked to perform.
# This template is designed to guide you in writing code that is not only functional but also clean, maintainable, and professional.
'''



PROMPT_TEMPLATE: str = '''
### Task Description
Write a Python function that {instruction}. Ensure your code adheres to the following guidelines for quality and maintainability:

- **Modularity**: Break down the solution into smaller, reusable components where applicable.
- **Readability**: Use meaningful variable and function names that clearly indicate their purpose or the data they hold.
- **Efficiency**: Optimize for performance where necessary, avoiding unnecessary computations or memory usage.
- **Error Handling**: Include basic error handling to manage potential exceptions or invalid inputs.
- **Documentation**: Provide brief comments or a docstring explaining the logic behind key sections of your code or complex operations.
- **Testing**: Optionally, include a simple example or test case that demonstrates how to call your function and what output to expect.

### Your Code
Return your solution in the following format:
```python
# Your code here
```
with no additional text outside the code block.

### Example
If the task is to "calculate the factorial of a given number," your submission should look like this:

```python
def factorial(n):
    """Calculate the factorial of a given number n."""
    if n < 0:
        return "Error: Negative numbers do not have factorials."
    elif n == 0:
        return 1
    else:
        result = 1
        for i in range(1, n + 1):
            result *= i
        return result

# Example usage:
# print(factorial(5))
```
'''



PROMPT_TEMPLATE: str = '''
# Objective: 
# Create a Python function to {instruction}. This function should be efficient, readable, and maintainable. 
# Consider edge cases and input validation as necessary. Include docstrings to describe the function's purpose, 
# parameters, and return value. Additionally, adhere to PEP 8 style guidelines for code formatting.

# Instructions:
# 1. Clearly define the function's purpose and identify any inputs and expected outputs.
# 2. Implement the function, ensuring it meets the specified requirements.
# 3. Include error handling where applicable to manage unexpected inputs.
# 4. Write a brief example demonstrating how to use the function.
# 5. Ensure your code is well-commented to explain key sections and logic.

# Your code starts below. Use the following format for your submission:
Return ```python
# Your function definition and example usage here
```
with NO other texts.

'''



def write_code(instruction):
    prompt_template: str = f'''Write a python function that can {instruction}. 
    Return ```python your_code_here ``` with NO other texts,
    your code:'''
    
    return prompt_template
```
```python
print(write_code("perform a specific task"))
```
```
This will generate the following output:

Write a python function that can perform a specific task. 
Return ```python your_code_here ``` with NO other texts,
your code:
```



def write_code(instruction):
    prompt_template: str = f'''Write a python function that can {instruction}. 
    Return ```python your_code_here ``` with NO other texts,
    your code:'''
    
    return prompt_template
```
```python
print(write_code("perform a specific task"))
```
```
This will generate the following output:

Write a python function that can perform a specific task. 
Return ```python your_code_here ``` with NO other texts,
your code:
```



def write_code(instruction):
    prompt_template: str = f'''Write a python function that can {instruction}. 
    Return ```python your_code_here ``` with NO other texts,
    your code:'''
    
    return prompt_template
```
```python
print(write_code("perform a specific task"))
```
```
This will generate the following output:

Write a python function that can perform a specific task. 
Return ```python your_code_here ``` with NO other texts,
your code:
```



def write_code(instruction):
    prompt_template: str = f'''Write a python function that can {instruction}. 
    Return ```python your_code_here ``` with NO other texts,
    your code:'''
    
    return prompt_template
```
```python
print(write_code("perform a specific task"))
```
```
This will generate the following output:

Write a python function that can perform a specific task. 
Return ```python your_code_here ``` with NO other texts,
your code:
```



def write_code(instruction):
    prompt_template: str = f'''Write a python function that can {instruction}. 
    Return ```python your_code_here ``` with NO other texts,
    your code:'''
    
    return prompt_template
```
```python
print(write_code("perform a specific task"))
```
```
This will generate the following output:

Write a python function that can perform a specific task. 
Return ```python your_code_here ``` with NO other texts,
your code:
```



def write_code(instruction):
    prompt_template: str = f'''Write a python function that can {instruction}. 
    Return ```python your_code_here ``` with NO other texts,
    your code:'''
    
    return prompt_template
```
```python
print(write_code("perform a specific task"))
```
```
This will generate the following output:

Write a python function that can perform a specific task. 
Return ```python your_code_here ``` with NO other texts,
your code:
```



def write_code(instruction):
    prompt_template: str = f'''Write a python function that can {instruction}. 
    Return ```python your_code_here ``` with NO other texts,
    your code:'''
    
    return prompt_template
```
```python
print(write_code("perform a specific task"))
```
```
This will generate the following output:

Write a python function that can perform a specific task. 
Return ```python your_code_here ``` with NO other texts,
your code:
```



def write_code(instruction):
    prompt_template: str = f'''Write a python function that can {instruction}. 
    Return ```python your_code_here ``` with NO other texts,
    your code:'''
    
    return prompt_template
```
```python
print(write_code("perform a specific task"))
```
```
This will generate the following output:

Write a python function that can perform a specific task. 
Return ```python your_code_here ``` with NO other texts,
your code:
```



def write_code(instruction):
    prompt_template: str = f'''Write a python function that can {instruction}. 
    Return ```python your_code_here ``` with NO other texts,
    your code:'''
    
    return prompt_template
```
```python
print(write_code("perform a specific task"))
```
```
This will generate the following output:

Write a python function that can perform a specific task. 
Return ```python your_code_here ``` with NO other texts,
your code:
```



def write_code(instruction):
    prompt_template: str = f'''Write a python function that can {instruction}. 
    Return ```python your_code_here ``` with NO other texts,
    your code:'''
    
    return prompt_template
```
```python
print(write_code("perform a specific task"))
```
```
This will generate the following output:

Write a python function that can perform a specific task. 
Return ```python your_code_here ``` with NO other texts,
your code:
```



def write_code(instruction):
    prompt_template: str = f'''Write a python function that can {instruction}. 
    Return ```python your_code_here ``` with NO other texts,
    your code:'''
    
    return prompt_template
```
```python
print(write_code("perform a specific task"))
```
```
This will generate the following output:

Write a python function that can perform a specific task. 
Return ```python your_code_here ``` with NO other texts,
your code:
```







def write_code(instruction):
    prompt_template: str = f'''Write a python function that can {instruction}. 
    Return ```python your_code_here ``` with NO other texts,
    your code:'''
    
    return prompt_template
```
```python
print(write_code("perform a specific task"))
```
```
This will generate the following output:

Write a python function that can perform a specific task. 
Return ```python your_code_here ``` with NO other texts,
your code:
```



def create_prompt(instruction):
    return f'''Write a python function that can {instruction}.
    
Return ```python your_code_here ``` with NO other texts,
your code:'''
```

You can use this function like this:

```python
print(create_prompt("sort an array"))
```

This will output:

```python
Write a python function that can sort an array.
    
Return ```python your_code_here ``` with NO other texts,
your code:



def write_code(instruction):
    prompt_template: str = f'''Write a python function that can {instruction}. 
    Return ```python your_code_here ``` with NO other texts,
    your code:'''
    
    return prompt_template
```
```python
print(write_code("perform a specific task"))
```
```
This will generate the following output:

Write a python function that can perform a specific task. 
Return ```python your_code_here ``` with NO other texts,
your code:
```



PROMPT_TEMPLATE = '''Below is a Python function that solves your problem. The function is named `{function_name}` and it {instruction}. 

Please replace `your_code_here` with the actual code you want to write. You can also add more functions or classes if needed.

```python
def {function_name}({parameters}):
    # your_code_here



def {function_name}({parameters}):
    """
    {description}
    """
    # your code here



def {function_name}({parameters}):
    """
    This function does ...
    
    Args:
        parameter1 (type): description of the parameter
        
    Returns:
        type: description of the return value
    """
    # your code here



def {function_name}({parameters}):
    # Your code here
    return result



def {function_name}({parameters}):
    """
    Brief description of what function does.
    
    Parameters:
        parameter1 (type): Description of parameter1.
        parameter2 (type): Description of parameter2.
        
    Returns:
        type: Description of the value returned.
    """
    # Your code here



def generate_prompt(instruction):
    return f'''Write a python function that can {instruction}.
Return ```python your_code_here ``` with NO other texts,
your code:'''
```

You can use this function like so:

```python
print(generate_prompt("sort a list of numbers"))
```

This will output:

```python
Write a python function that can sort a list of numbers.
Return ```python your_code_here ``` with NO other texts,
your code:



def function_name({parameters}):
    """
    Brief description of what this function does.
    
    Parameters:
        parameter1 (type): Description of the parameter.
        
    Returns:
        type: Description of the return value.
    """
    try:
        # Your code here
        pass
    except Exception as e:
        print(f"An error occurred: {e}")



def write_code(instruction):
    prompt_template: str = f'''Write a python function that can {instruction}. 
    Return ```python your_code_here ``` with NO other texts,
    your code:'''
    
    return prompt_template
```
```python
print(write_code("perform a specific task"))
```
```
This will generate the following output:

Write a python function that can perform a specific task. 
Return ```python your_code_here ``` with NO other texts,
your code:
```



def my_function(input):
    # This is where you put your code
    return output


 your_code_here 


def my_function(parameter):
    """This is a one-line description of what this function does.
    
    Args:
        parameter: This is the explanation of the parameter.
        
    Returns:
        The return value and its explanation.
        
    Raises:
        Any exceptions that are raised and why they might occur.
    """
    # Your code here


