{"date": "2024-03-29 01:26", "hash": "84f4b93a1270b492e4c54d5212da7a5b", "eval": {"HumanEval/152": [{"task_id": "HumanEval/152", "solution": "\ndef compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(guess, game)]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/155": [{"task_id": "HumanEval/155", "solution": "\ndef even_odd_count(num):\n    num = str(abs(num))\n    even = 0\n    odd = 0\n    for digit in num:\n        if int(digit) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/108": [{"task_id": "HumanEval/108", "solution": "\ndef count_nums(arr):\n    return sum(sum(int(digit) for digit in str(abs(n))) > 0 for n in arr)\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[-1, -2, 0]]], "plus_fail_tests": [[[-1, 0, 1]]]}], "HumanEval/137": [{"task_id": "HumanEval/137", "solution": "\ndef compare_one(a, b):\n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n    \n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1, "2,3"]], "plus_fail_tests": [["-4,1", "-4.0"]]}], "HumanEval/163": [{"task_id": "HumanEval/163", "solution": "\ndef generate_integers(a, b):\n    if a > b:\n        a, b = b, a\n        \n    return sorted([i for i in range(a, b + 1) if i % 2 == 0])\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/101": [{"task_id": "HumanEval/101", "solution": "\ndef words_string(s):\n    return s.replace(',', '').split()\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["Elephant,giraffe,,lion,zebra"]]}], "HumanEval/106": [{"task_id": "HumanEval/106", "solution": "\ndef factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\ndef f(n):\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(i+1)))\n    return result\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/4": [{"task_id": "HumanEval/4", "solution": "\nfrom typing import List\nimport numpy as np\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    x = np.array(numbers)\n    x_mean = np.mean(x)\n    return np.mean(np.abs(x - x_mean))\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/3": [{"task_id": "HumanEval/3", "solution": "\ndef below_zero(operations):\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/162": [{"task_id": "HumanEval/162", "solution": "\nimport hashlib\n\ndef string_to_md5(text):\n    if text == \"\":\n        return None\n    else:\n        result = hashlib.md5(text.encode())\n        return result.hexdigest()\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/153": [{"task_id": "HumanEval/153", "solution": "\ndef Strongest_Extension(class_name, extensions):\n    def strength(ext):\n        return sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower())\n\n    strongest = max(extensions, key=strength)\n    return f'{class_name}.{strongest}'\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/2": [{"task_id": "HumanEval/2", "solution": "\ndef truncate_number(number: float) -> float:\n    return number - int(number)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/154": [{"task_id": "HumanEval/154", "solution": "\ndef cycpattern_check(a , b):\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["", ""]]}], "HumanEval/130": [{"task_id": "HumanEval/130", "solution": "\ndef tribonacci(n):\n    if n == 0: return [1]\n    elif n == 1: return [1, 3]\n    else:\n        seq = [1, 3]\n        for i in range(2, n+1):\n            if i % 2 == 0:\n                seq.append(int(1 + i / 2))\n            else:\n                seq.append(seq[i-1] + seq[i-2] + seq[i])\n        return seq[:n+1]\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/138": [{"task_id": "HumanEval/138", "solution": "\ndef is_equal_to_sum_even(n):\n    if n < 16 or n % 2 != 0:\n        return False\n    else:\n        return True\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[8]], "plus_fail_tests": [[8]]}], "HumanEval/107": [{"task_id": "HumanEval/107", "solution": "\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\ndef even_odd_palindrome(n):\n    count_even = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n    return (count_even, count_odd)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/5": [{"task_id": "HumanEval/5", "solution": "\ndef intersperse(numbers, delimeter):\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/131": [{"task_id": "HumanEval/131", "solution": "\ndef digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product if product > 1 else 0\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[120]], "plus_fail_tests": [[111]]}], "HumanEval/136": [{"task_id": "HumanEval/136", "solution": "\ndef largest_smallest_integers(lst):\n    negatives = [i for i in lst if i < 0]\n    positives = [i for i in lst if i > 0]\n    return (max(negatives) if negatives else None, min(positives) if positives else None)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/139": [{"task_id": "HumanEval/139", "solution": "\ndef special_factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        result = 1\n        for i in range(2, n+1):\n            fact = i\n            for j in range(i-1, 1, -1):\n                fact *= j\n            result *= fact\n        return result\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[499]]}], "HumanEval/100": [{"task_id": "HumanEval/100", "solution": "\ndef make_a_pile(n):\n    pile = [n]\n    while n > 0:\n        if n % 2 == 0:\n            n += 1\n        else:\n            n += 2\n        pile.append(n)\n    return pile[1:]\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/109": [{"task_id": "HumanEval/109", "solution": "\ndef move_one_ball(arr):\n    if not arr or len(arr) == 1:\n        return True\n    count = 0\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            count += 1\n    if arr[-1] > arr[0]:\n        count += 1\n    return count <= 1\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/20": [{"task_id": "HumanEval/20", "solution": "\ndef find_closest_elements(numbers):\n    numbers.sort()\n    closest = (numbers[0], numbers[1])\n    min_difference = abs(numbers[0] - numbers[1])\n    for i in range(1, len(numbers) - 1):\n        difference = abs(numbers[i] - numbers[i + 1])\n        if difference < min_difference:\n            closest = (numbers[i], numbers[i + 1])\n            min_difference = difference\n    return closest\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/18": [{"task_id": "HumanEval/18", "solution": "\ndef how_many_times(string: str, substring: str) -> int:\n    count = start = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos != -1:\n            count += 1\n            start = pos + 1\n        else:\n            break\n    return count\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/27": [{"task_id": "HumanEval/27", "solution": "\ndef flip_case(string):\n    return ''.join([c.upper() if c.islower() else c.lower() for c in string])\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/11": [{"task_id": "HumanEval/11", "solution": "\ndef string_xor(a: str, b: str) -> str:\n    return ''.join([str(int(i) ^ int(j)) for i, j in zip(a, b)])\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/16": [{"task_id": "HumanEval/16", "solution": "\ndef count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/29": [{"task_id": "HumanEval/29", "solution": "\ndef filter_by_prefix(strings, prefix):\n    return [s for s in strings if s.startswith(prefix)]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/89": [{"task_id": "HumanEval/89", "solution": "\ndef encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 97 if char.islower() else 65\n            encrypted_char = chr((ord(char) - ascii_offset + 2*2) % 26 + ascii_offset)\n            result += encrypted_char\n        else:\n            result += char\n    return result\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/42": [{"task_id": "HumanEval/42", "solution": "\ndef incr_list(l):\n    return [i+1 for i in l]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/45": [{"task_id": "HumanEval/45", "solution": "\ndef triangle_area(a, h):\n    return (0.5 * a * h)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/73": [{"task_id": "HumanEval/73", "solution": "\ndef smallest_change(arr):\n    n = len(arr)\n    changes = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-1-i]:\n            changes += 1\n    return changes\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/87": [{"task_id": "HumanEval/87", "solution": "\ndef get_row(lst, x):\n    result = []\n    for i in range(len(lst)):\n        row = lst[i]\n        for j in range(len(row)):\n            if row[j] == x:\n                result.append((i, j))\n    return sorted(result, key=lambda tup: (-tup[0], tup[1]))\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[[1, 1], [1, 2, 3], [4, 5, 6, 7]], 1]]}], "HumanEval/74": [{"task_id": "HumanEval/74", "solution": "\ndef total_match(lst1, lst2):\n    sum1 = sum([len(i) for i in lst1])\n    sum2 = sum([len(i) for i in lst2])\n    if sum1 <= sum2:\n        return lst1\n    else:\n        return lst2\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/80": [{"task_id": "HumanEval/80", "solution": "\ndef is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/10": [{"task_id": "HumanEval/10", "solution": "\ndef make_palindrome(string: str) -> str:\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[i-1::-1]\n    return string + string[::-1]\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["x"]], "plus_fail_tests": []}], "HumanEval/17": [{"task_id": "HumanEval/17", "solution": "\ndef parse_music(music_string: str) -> List[int]:\n    music_dict = {'o': 4, 'o|': 2, '.|': 1}\n    return [music_dict[note.strip()] for note in music_string.split(' ')]\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/28": [{"task_id": "HumanEval/28", "solution": "\ndef concatenate(strings):\n    return ''.join(strings)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/26": [{"task_id": "HumanEval/26", "solution": "\ndef remove_duplicates(numbers):\n    result = []\n    for num in numbers:\n        if num not in result:\n            result.append(num)\n    return result\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3, 2, 4, 3, 5]]], "plus_fail_tests": []}], "HumanEval/19": [{"task_id": "HumanEval/19", "solution": "\ndef sort_numbers(numbers):\n    nums = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    }\n    \n    num_list = numbers.split()\n    num_list.sort(key=lambda x: nums[x])\n    \n    return ' '.join(num_list)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/81": [{"task_id": "HumanEval/81", "solution": "\ndef numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa >= 3.7:\n            letter_grades.append('A')\n        elif gpa >= 3.3:\n            letter_grades.append('A-')\n        elif gpa >= 3.0:\n            letter_grades.append('B+')\n        elif gpa >= 2.7:\n            letter_grades.append('B')\n        elif gpa >= 2.3:\n            letter_grades.append('B-')\n        elif gpa >= 2.0:\n            letter_grades.append('C+')\n        elif gpa >= 1.7:\n            letter_grades.append('C')\n        elif gpa >= 1.3:\n            letter_grades.append('C-')\n        elif gpa >= 1.0:\n            letter_grades.append('D+')\n        elif gpa >= 0.7:\n            letter_grades.append('D')\n        elif gpa >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/21": [{"task_id": "HumanEval/21", "solution": "\ndef rescale_to_unit(numbers):\n    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    return [(x - min_val) / range_val for x in numbers]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/75": [{"task_id": "HumanEval/75", "solution": "\ndef is_multiply_prime(a):\n    primes = [2, 3, 5, 7]\n    factors = []\n    for prime in primes:\n        while a % prime == 0:\n            factors.append(prime)\n            a /= prime\n    return len(factors) == 3 and all(factors.count(i) == [2, 3, 5].count(i) for i in set(factors))\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[8]], "plus_fail_tests": [[99]]}], "HumanEval/72": [{"task_id": "HumanEval/72", "solution": "\ndef will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/86": [{"task_id": "HumanEval/86", "solution": "\ndef anti_shuffle(s):\n    return \" \".join(\"\".join(sorted(word)) for word in s.split())\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["\n\n123 456\n789\n"]]}], "HumanEval/88": [{"task_id": "HumanEval/88", "solution": "\ndef sort_array(arr):\n    if not arr:\n        return []\n    elif len(arr) == 1:\n        return [arr[0]]\n    else:\n        sum = arr[0] + arr[-1]\n        if sum % 2 == 0:\n            return sorted(arr, reverse=True)\n        else:\n            return sorted(arr)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/44": [{"task_id": "HumanEval/44", "solution": "\ndef change_base(x: int, base: int):\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/43": [{"task_id": "HumanEval/43", "solution": "\ndef pairs_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/61": [{"task_id": "HumanEval/61", "solution": "\ndef correct_bracketing(brackets):\n    count = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count += 1\n        elif bracket == ')':\n            count -= 1\n        if count < 0:  # closing bracket before opening one\n            return False\n    return count == 0  # all brackets should be closed\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/95": [{"task_id": "HumanEval/95", "solution": "\ndef check_dict_case(d):\n    if not d:  # If the dictionary is empty\n        return False\n    case = None\n    for key in d.keys():\n        if type(key) != str:  # If a non-string key is found\n            return False\n        if case is None:  # Set the case based on the first key\n            case = key.islower()\n        elif (case and not key.islower()) or (not case and not key.isupper()):  # If the case doesn't match\n            return False\n    return True\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[{"8": "banana"}]]}], "HumanEval/66": [{"task_id": "HumanEval/66", "solution": "\ndef digitSum(s):\n    return sum([ord(c) for c in s if c.isupper()])\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/92": [{"task_id": "HumanEval/92", "solution": "\ndef any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x == y + z or y == x + z or z == x + y\n    else:\n        return False\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/59": [{"task_id": "HumanEval/59", "solution": "\ndef largest_prime_factor(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/50": [{"task_id": "HumanEval/50", "solution": "\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/57": [{"task_id": "HumanEval/57", "solution": "\ndef monotonic(l):\n    return (all(x<y for x, y in zip(l, l[1:])) or\n            all(x>y for x, y in zip(l, l[1:])))\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[4, 1, 1, 0]]], "plus_fail_tests": [[[1, 1, 1, 1, 1]]]}], "HumanEval/68": [{"task_id": "HumanEval/68", "solution": "\ndef pluck(arr):\n    even_values = [i for i in arr if i % 2 == 0]\n    if not even_values:\n        return []\n    smallest_even_value = min(even_values)\n    index = arr.index(smallest_even_value)\n    return [smallest_even_value, index]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/32": [{"task_id": "HumanEval/32", "solution": "\nimport math\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" \n    xs are coefficients of a polynomial.\n    find_zero finds x such that poly(x) = 0.\n    find_zero returns only one zero point, even if there are many.\n    Moreover, find_zero only takes lists xs having an even number of coefficients\n    and the largest non-zero coefficient as it guarantees a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    n = len(xs)\n    if n % 2 == 0:\n        raise ValueError(\"The number of coefficients must be odd.\")\n    max_coeff = max([abs(c) for c in xs])\n    x = 0.5 * max_coeff\n    while True:\n        fx = poly(xs, x)\n        if abs(fx) < 1e-6: # Stop when the function value is small enough\n            return round(x, 2)\n        dfdx = sum([i*c*math.pow(x, i-1) for i, c in enumerate(xs[1:], start=1)])\n        if abs(dfdx) < 1e-6: # Stop when the derivative is small enough\n            raise ValueError(\"Cannot find a zero point.\")\n        x = x - fx / dfdx\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/35": [{"task_id": "HumanEval/35", "solution": "\ndef max_element(l):\n    return max(l)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/56": [{"task_id": "HumanEval/56", "solution": "\ndef correct_bracketing(brackets):\n    count = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count += 1\n        elif bracket == '>':\n            if count == 0:\n                return False\n            count -= 1\n    return count == 0\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/69": [{"task_id": "HumanEval/69", "solution": "\ndef search(lst):\n    from collections import Counter\n    counter = Counter(lst)\n    for num in sorted(counter.keys(), reverse=True):\n        if num <= counter[num]:\n            return num\n    return -1\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/51": [{"task_id": "HumanEval/51", "solution": "\ndef remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/93": [{"task_id": "HumanEval/93", "solution": "\ndef encode(message):\n    vowels = 'aeiouAEIOU'\n    encoded_msg = ''\n    for char in message:\n        if char.isalpha():\n            if char in vowels:\n                index = (vowels.index(char) + 2) % 5\n                if char.isupper():\n                    encoded_msg += vowels[index].upper()\n                else:\n                    encoded_msg += vowels[index]\n            elif char.isupper():\n                encoded_msg += char.lower()\n            else:\n                encoded_msg += char.upper()\n        else:\n            encoded_msg += char\n    return encoded_msg\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/67": [{"task_id": "HumanEval/67", "solution": "\ndef fruit_distribution(s,n):\n    fruits = s.split(\" and \")\n    apples = int(fruits[0].split()[0])\n    oranges = int(fruits[1].split()[0])\n    return n - apples - oranges\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/60": [{"task_id": "HumanEval/60", "solution": "\ndef sum_to_n(n):\n    return n * (n + 1) // 2\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/94": [{"task_id": "HumanEval/94", "solution": "\ndef is_prime(n):\n    if n <= 1 or (n % 2 == 0 and n > 2): \n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef largest_prime(lst):\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return None\n    max_prime = max(primes)\n    return sum(int(digit) for digit in str(max_prime))\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/58": [{"task_id": "HumanEval/58", "solution": "\ndef common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/34": [{"task_id": "HumanEval/34", "solution": "\ndef unique(l):\n    return sorted(set(l))\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/33": [{"task_id": "HumanEval/33", "solution": "\ndef sort_third(l):\n    thirds = sorted([x for i, x in enumerate(l) if i % 3 == 0])\n    j = 0\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l[i] = thirds[j]\n            j += 1\n    return l\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/114": [{"task_id": "HumanEval/114", "solution": "\ndef minSubArraySum(nums):\n    current_sum = nums[0]\n    min_sum = nums[0]\n\n    for i in range(1, len(nums)):\n        current_sum = min(current_sum + nums[i], nums[i])\n        min_sum = min(min_sum, current_sum)\n\n    return min_sum\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/113": [{"task_id": "HumanEval/113", "solution": "\ndef odd_count(lst):\n    return [\"the number of odd elements in the string {} of the input.\".format(sum(int(digit) % 2 for digit in num)) for num in lst]\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/125": [{"task_id": "HumanEval/125", "solution": "\ndef split_words(txt):\n    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for char in txt:\n            if char.islower() and (ord(char) - ord('a')) % 2 == 1:\n                count += 1\n        return count\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["Hello ,Helaabc123lo? rld  !"]]}], "HumanEval/122": [{"task_id": "HumanEval/122", "solution": "\ndef add_elements(arr, k):\n    return sum([i for i in arr[:k] if 0 <= i <= 99])\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[-4, 5, 67, 34, 56, 12, 89, 23, 45], 7]]}], "HumanEval/149": [{"task_id": "HumanEval/149", "solution": "\ndef sorted_list_sum(lst):\n    # Filter out strings of odd lengths\n    lst = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list by length and then alphabetically\n    lst.sort(key=lambda x: (len(x), x))\n    return lst\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/140": [{"task_id": "HumanEval/140", "solution": "\nimport re\n\ndef fix_spaces(text):\n    text = text.strip()  # Remove leading and trailing spaces\n    text = re.sub(' +', ' ', text)  # Replace multiple spaces with single space\n    if '  ' in text:\n        return text.replace(' ', '-').replace('_', ' ')\n    else:\n        return text.replace(' ', '_')\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["Mudasir Hanif "]], "plus_fail_tests": []}], "HumanEval/123": [{"task_id": "HumanEval/123", "solution": "\ndef get_odd_collatz(n):\n    collatz = []\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        if n not in collatz:\n            collatz.append(n)\n    return sorted([i for i in collatz if i%2 != 0])\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[5]], "plus_fail_tests": [[3]]}], "HumanEval/124": [{"task_id": "HumanEval/124", "solution": "\nimport re\nfrom datetime import datetime\n\ndef valid_date(date):\n    if not date:  # check if the string is empty\n        return False\n        \n    try:\n        res = bool(datetime.strptime(date, '%m-%d-%Y'))  # check if the format is correct\n    except ValueError:\n        res = False\n    \n    if res:\n        day, month, year = map(int, date.split('-'))  # split the string into day, month and year\n        \n        # check if the months are valid\n        if not (1 <= month <= 12):  \n            return False\n            \n        # check if the days are valid for each month\n        if month in [4,6,9,11] and not(1 <= day <= 30): \n            return False\n        elif month == 2:\n            if year % 4 == 0:  # check for leap years\n                if not (1 <= day <= 29):  \n                    return False\n            else:\n                if not (1 <= day <= 28):  \n                    return False\n        else:\n            if not(1 <= day <= 31):  \n                return False\n    return res\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/112": [{"task_id": "HumanEval/112", "solution": "\ndef reverse_delete(s, c):\n    s = ''.join([i for i in s if i not in c])\n    return (s, s == s[::-1])\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/115": [{"task_id": "HumanEval/115", "solution": "\ndef max_fill(grid, capacity):\n    # Calculate the total water in each row and sort them in descending order.\n    water = sorted([sum(row) for row in grid], reverse=True)\n    # Initialize the number of times to lower the buckets.\n    count = 0\n    # Iterate over the sorted list of water amounts.\n    for w in water:\n        # If there is still water left and we can fill the bucket,\n        while w > 0 and capacity > 0:\n            # Fill the bucket with as much water as possible.\n            if w >= capacity:\n                w -= capacity\n            else:\n                w = 0\n            # Increase the number of times to lower the buckets.\n            count += 1\n    return count\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/141": [{"task_id": "HumanEval/141", "solution": "\nimport re\n\ndef file_name_check(file_name):\n    pattern = r'^[a-zA-Z][a-zA-Z0-9]{0,2}\\.(txt|exe|dll)$'\n    if len(re.findall('\\d', file_name)) > 3:\n        return 'No'\n    elif re.match(pattern, file_name):\n        return 'Yes'\n    else:\n        return 'No'\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["hello world.exe"]]}], "HumanEval/146": [{"task_id": "HumanEval/146", "solution": "\ndef specialFilter(nums):\n    def isOddDigit(n):\n        return int(str(n)[0]) % 2 != 0 and int(str(n)[-1]) % 2 != 0\n\n    count = 0\n    for num in nums:\n        if num > 10 and isOddDigit(num):\n            count += 1\n    return count\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/148": [{"task_id": "HumanEval/148", "solution": "\ndef bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 in planets and planet2 in planets:\n        index1 = planets.index(planet1)\n        index2 = planets.index(planet2)\n        if index1 < index2:\n            return tuple(planets[index1+1 : index2])\n        else:\n            return tuple(planets[index2+1 : index1])\n    else:\n        return ()\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/134": [{"task_id": "HumanEval/134", "solution": "\ndef check_if_last_char_is_a_letter(txt):\n    if not txt or not txt[-1].isalpha():\n        return False\n    else:\n        words = txt.split()\n        last_word = words[-1]\n        return last_word[-1] == last_word[-1].upper() and last_word[-1] == last_word[-1].lower()\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["apple pi e"]], "plus_fail_tests": []}], "HumanEval/133": [{"task_id": "HumanEval/133", "solution": "\ndef sum_squares(lst):\n    return sum([int(x)**2 for x in lst])\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1.4, 4.2, 0]]], "plus_fail_tests": [[[0, 3.3, 7.7, -2.2]]]}], "HumanEval/9": [{"task_id": "HumanEval/9", "solution": "\ndef rolling_max(numbers):\n    max_list = []\n    current_max = numbers[0]\n    for num in numbers:\n        if num > current_max:\n            current_max = num\n        max_list.append(current_max)\n    return max_list\n", "base_status": "fail", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/102": [{"task_id": "HumanEval/102", "solution": "\ndef choose_num(x, y):\n    for i in range(y, x-1, -1):\n        if i % 2 == 0:\n            return i\n    return -1\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/7": [{"task_id": "HumanEval/7", "solution": "\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/0": [{"task_id": "HumanEval/0", "solution": "\ndef has_close_elements(numbers, threshold):\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/105": [{"task_id": "HumanEval/105", "solution": "\ndef by_length(arr):\n    nums = [i for i in arr if 1 <= i <= 9]\n    nums.sort()\n    nums.reverse()\n    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    return [names[i-1] for i in nums]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/151": [{"task_id": "HumanEval/151", "solution": "\ndef double_the_difference(lst):\n    return sum([i**2 for i in lst if isinstance(i, int) and i % 2 != 0])\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[-1, -2, 8]]], "plus_fail_tests": [[[-5, 7, 9]]]}], "HumanEval/160": [{"task_id": "HumanEval/160", "solution": "\ndef do_algebra(operator, operand):\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += ' ' + operator[i] + ' ' + str(operand[i+1])\n    return eval(expression)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/158": [{"task_id": "HumanEval/158", "solution": "\ndef find_max(words):\n    max_unique = 0\n    max_word = ''\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique or (unique_chars == max_unique and word < max_word):\n            max_unique = unique_chars\n            max_word = word\n    return max_word\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/156": [{"task_id": "HumanEval/156", "solution": "\ndef int_to_mini_roman(number):\n    val = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    syb = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/104": [{"task_id": "HumanEval/104", "solution": "\ndef unique_digits(x):\n    return sorted([i for i in x if all(int(j) % 2 != 0 for j in str(i))])\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/103": [{"task_id": "HumanEval/103", "solution": "\ndef rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/6": [{"task_id": "HumanEval/6", "solution": "\ndef parse_nested_parens(paren_string):\n    return [max([len(i) for i in paren.split(')') if i]) for paren in paren_string.split()]\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["(()(())((())))"]], "plus_fail_tests": [["(()()(((())))(()(())))()"]]}], "HumanEval/1": [{"task_id": "HumanEval/1", "solution": "\ndef separate_paren_groups(paren_string):\n    paren_string = paren_string.replace(\" \", \"\")\n    stack = []\n    result = []\n    temp = \"\"\n\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            temp += char\n        elif char == ')':\n            stack.pop()\n            temp += char\n            if not stack:\n                result.append(temp)\n                temp = \"\"\n    return result\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/135": [{"task_id": "HumanEval/135", "solution": "\ndef can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/132": [{"task_id": "HumanEval/132", "solution": "\ndef is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack or (stack and stack[-1] != '['):\n                return True\n            else:\n                stack.pop()\n    return False\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/8": [{"task_id": "HumanEval/8", "solution": "\nfrom typing import List, Tuple\nimport functools\nimport operator\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    else:\n        return sum(numbers), functools.reduce(operator.mul, numbers, 1)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/159": [{"task_id": "HumanEval/159", "solution": "\ndef eat(number, need, remaining):\n    total = number + min(need, remaining)\n    left = max(0, remaining - need)\n    return [total, left]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/161": [{"task_id": "HumanEval/161", "solution": "\ndef solve(s):\n    if any(char.isalpha() for char in s):\n        return ''.join([char.upper() if char.islower() else char.lower() for char in s])\n    else:\n        return s[::-1]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/157": [{"task_id": "HumanEval/157", "solution": "\ndef right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[2]**2 == sides[0]**2 + sides[1]**2\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/150": [{"task_id": "HumanEval/150", "solution": "\ndef is_prime(n):\n    if n <= 1 or (n % 2 == 0 and n > 2): \n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/79": [{"task_id": "HumanEval/79", "solution": "\ndef decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]  # Convert to binary and remove the '0b' prefix\n    return \"db\" + binary + \"db\"\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/46": [{"task_id": "HumanEval/46", "solution": "\ndef fib4(n):\n    if n < 2:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(3, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[3]]}], "HumanEval/41": [{"task_id": "HumanEval/41", "solution": "\ndef car_race_collision(n):\n    return n * (n - 1) // 2\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/77": [{"task_id": "HumanEval/77", "solution": "\ndef iscube(a):\n    return round(abs(a) ** (1. / 3)) ** 3 == abs(a)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/48": [{"task_id": "HumanEval/48", "solution": "\ndef is_palindrome(text: str):\n    return text == text[::-1]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/83": [{"task_id": "HumanEval/83", "solution": "\ndef starts_one_ends(n):\n    if n == 1:\n        return 2\n    else:\n        return 10**(n-1)*2 - 9*starts_one_ends(n-1)\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/84": [{"task_id": "HumanEval/84", "solution": "\ndef solve(N):\n    return bin(sum(int(digit) for digit in str(N)))[2:]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/70": [{"task_id": "HumanEval/70", "solution": "\ndef strange_sort_list(lst):\n    result = []\n    while lst:\n        min_val = min(lst)\n        max_val = max(lst)\n        result.append(min_val)\n        if min_val != max_val:\n            result.append(max_val)\n        lst.remove(min_val)\n        if max_val in lst:\n            lst.remove(max_val)\n    return result\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[5, 5, 5, 5]]], "plus_fail_tests": [[[8, 8, 8, 8]]]}], "HumanEval/147": [{"task_id": "HumanEval/147", "solution": "\ndef get_max_triples(n):\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            for k in range(j+1, len(a)):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/23": [{"task_id": "HumanEval/23", "solution": "\ndef strlen(string: str) -> int:\n    return len(string)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/12": [{"task_id": "HumanEval/12", "solution": "\ndef longest(strings):\n    if not strings:\n        return None\n    else:\n        return max(strings, key=len)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/71": [{"task_id": "HumanEval/71", "solution": "\nimport math\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2.0\n        return round(math.sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n    else:\n        return -1\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/85": [{"task_id": "HumanEval/85", "solution": "\ndef add(lst):\n    return sum([val for idx, val in enumerate(lst) if idx % 2 != 0 and val % 2 == 0])\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/49": [{"task_id": "HumanEval/49", "solution": "\ndef modp(n: int, p: int):\n    return pow(2, n, p)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/82": [{"task_id": "HumanEval/82", "solution": "\ndef is_prime(n):\n    if n <= 1 or (n % 2 == 0 and n > 2): \n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    return is_prime(len(string))\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/76": [{"task_id": "HumanEval/76", "solution": "\ndef is_simple_power(x, n):\n    if x < 1 or n < 2:\n        return False\n    while x % n == 0:\n        x /= n\n    return x == 1\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1, 1]], "plus_fail_tests": [[1, 1]]}], "HumanEval/24": [{"task_id": "HumanEval/24", "solution": "\ndef largest_divisor(n):\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/47": [{"task_id": "HumanEval/47", "solution": "\ndef median(l):\n    l = sorted(l)\n    n = len(l)\n    m = n - 1\n    return (l[n//2] + l[m//2]) / 2.0\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/78": [{"task_id": "HumanEval/78", "solution": "\ndef hex_key(num):\n    primes = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit.upper() in primes:\n            count += 1\n    return count\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/40": [{"task_id": "HumanEval/40", "solution": "\ndef triples_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/13": [{"task_id": "HumanEval/13", "solution": "\ndef greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        a, b = b, a % b\n    return abs(a)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/22": [{"task_id": "HumanEval/22", "solution": "\ndef filter_integers(values):\n    return [value for value in values if isinstance(value, int)]\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[true, false, null, 0, -10, "test", [], {}, 3.14]]]}], "HumanEval/14": [{"task_id": "HumanEval/14", "solution": "\ndef all_prefixes(string):\n    return [string[:i] for i in range(1, len(string) + 1)]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/25": [{"task_id": "HumanEval/25", "solution": "\ndef factorize(n):\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/38": [{"task_id": "HumanEval/38", "solution": "\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) +2) // 3)]\n    # undo cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/36": [{"task_id": "HumanEval/36", "solution": "\ndef fizz_buzz(n):\n    count = 0\n    for i in range(11, n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[78]], "plus_fail_tests": [[78]]}], "HumanEval/65": [{"task_id": "HumanEval/65", "solution": "\ndef circular_shift(x, shift):\n    x = str(x)\n    if shift > len(x):\n        return x[::-1]\n    else:\n        return x[-shift:] + x[:-shift]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/31": [{"task_id": "HumanEval/31", "solution": "\ndef is_prime(n):\n    if n <= 1 or (n % 2 == 0 and n > 2): \n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/91": [{"task_id": "HumanEval/91", "solution": "\ndef is_bored(S):\n    sentences = S.replace('!', '.').replace('?', '.').split('.')\n    return sum([1 for sentence in sentences if sentence.strip().startswith(\"I\")])\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["Is the sky blue?"]], "plus_fail_tests": [["In the morning, I like to have a cup of coffee to start my day off right. How about you?"]]}], "HumanEval/62": [{"task_id": "HumanEval/62", "solution": "\ndef derivative(xs):\n    return [i*x for i, x in enumerate(xs)][1:]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/54": [{"task_id": "HumanEval/54", "solution": "\ndef same_chars(s0: str, s1: str) -> bool:\n    return sorted(s0) == sorted(s1)\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["aaabbbccc", "abbabcbc"]]}], "HumanEval/53": [{"task_id": "HumanEval/53", "solution": "\ndef add(x: int, y: int):\n    return x + y\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/30": [{"task_id": "HumanEval/30", "solution": "\ndef get_positive(l):\n    return [i for i in l if i > 0]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/98": [{"task_id": "HumanEval/98", "solution": "\ndef count_upper(s):\n    vowels = 'AEIOU'\n    return sum(1 for i in range(0, len(s), 2) if s[i].isupper() and s[i] in vowels)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/96": [{"task_id": "HumanEval/96", "solution": "\ndef count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = []\n    for i in range(n):\n        if is_prime(i):\n            primes.append(i)\n            \n    return primes\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/37": [{"task_id": "HumanEval/37", "solution": "\ndef sort_even(l):\n    even_indices = sorted([x for i, x in enumerate(l) if i % 2 == 0])\n    result = [None] * len(l)\n    result[::2] = even_indices\n    result[1::2] = l[1::2]\n    return result\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/52": [{"task_id": "HumanEval/52", "solution": "\ndef below_threshold(l: list, t: int):\n    return all(i < t for i in l)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/99": [{"task_id": "HumanEval/99", "solution": "\ndef closest_integer(value):\n    value = float(value)\n    if value > 0:\n        return int(value + 0.5)\n    else:\n        return int(value - 0.5)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/55": [{"task_id": "HumanEval/55", "solution": "\ndef fib(n):\n    if n <= 0:\n        return \"Input should be positive integer.\"\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        for i in range(2, n):\n            a, b = b, a + b\n        return b\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/63": [{"task_id": "HumanEval/63", "solution": "\ndef fibfib(n):\n    if n < 0:\n        return \"Input should be non-negative\"\n    elif n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/39": [{"task_id": "HumanEval/39", "solution": "\ndef is_prime(n):\n    if n <= 1 or (n % 2 == 0 and n > 2): \n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef fibonacci():\n    a, b = 0, 1\n    while True:\n        yield a\n        a, b = b, a + b\n\ndef prime_fib(n):\n    count = 0\n    for f in fibonacci():\n        if is_prime(f) and f != 0:\n            count += 1\n            if count == n:\n                return f\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[12]]}], "HumanEval/97": [{"task_id": "HumanEval/97", "solution": "\ndef multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/90": [{"task_id": "HumanEval/90", "solution": "\ndef next_smallest(lst):\n    if len(set(lst)) <= 1:  # If all elements are the same or list is empty\n        return None\n    else:\n        lst = sorted(list(set(lst)))  # Remove duplicates and sort the list\n        return lst[1]  # Return the second smallest element\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/64": [{"task_id": "HumanEval/64", "solution": "\ndef vowels_count(s):\n    count = 0\n    for char in s.lower():\n        if char in 'aeiou':\n            count += 1\n        elif char == 'y' and len(s) > 1 and s[-2].lower() not in 'aeiou':\n            count += 1\n    return count\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["key"]], "plus_fail_tests": [["monkey"]]}], "HumanEval/143": [{"task_id": "HumanEval/143", "solution": "\ndef is_prime(n):\n    if n <= 1 or (n % 2 == 0 and n > 2): \n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/110": [{"task_id": "HumanEval/110", "solution": "\ndef exchange(lst1, lst2):\n    # Check if all elements in lst1 are even\n    for num in lst1:\n        if num % 2 != 0:\n            return \"NO\"\n            \n    # Check if there is any odd number in lst2\n    for num in lst2:\n        if num % 2 != 0:\n            return \"YES\"\n    \n    return \"NO\"\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 3, 5], [2, 4, 6]]]}], "HumanEval/144": [{"task_id": "HumanEval/144", "solution": "\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef simplify(x, n):\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n    \n    product_num = x_num * n_num\n    product_denom = x_denom * n_denom\n    \n    gcd_val = gcd(product_num, product_denom)\n    \n    return (product_num // gcd_val) % (product_denom // gcd_val) == 0\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/128": [{"task_id": "HumanEval/128", "solution": "\ndef prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    summation = 0\n    for num in arr:\n        product *= (num > 0) - (num < 0)\n        summation += abs(num)\n    return product * summation\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/121": [{"task_id": "HumanEval/121", "solution": "\ndef solution(lst):\n    return sum([val for i, val in enumerate(lst) if i % 2 == 0 and val % 2 != 0])\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/117": [{"task_id": "HumanEval/117", "solution": "\ndef select_words(s, n):\n    vowels = 'aeiou'\n    words = s.split()\n    result = []\n    for word in words:\n        if sum([1 for c in word.lower() if c not in vowels]) == n:\n            result.append(word)\n    return result\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/119": [{"task_id": "HumanEval/119", "solution": "\ndef match_parens(lst):\n    # Concatenate the two strings in some order.\n    s = lst[0] + lst[1]\n    stack = []\n    for c in s:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            # If there is no matching opening parenthesis, return 'No'.\n            if not stack:\n                return 'No'\n            else:\n                stack.pop()\n    # If all parentheses are matched, return 'Yes'.\n    if not stack:\n        return 'Yes'\n    else:\n        return 'No'\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[")())", "(()()("]]], "plus_fail_tests": [[[")()()()(()()))", "(("]]]}], "HumanEval/126": [{"task_id": "HumanEval/126", "solution": "\ndef is_sorted(lst):\n    return lst == sorted(lst) and len(lst) == len(set(lst))\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 2, 3, 3, 4]]], "plus_fail_tests": [[[1, 1, 2, 2, 3, 3, 4]]]}], "HumanEval/145": [{"task_id": "HumanEval/145", "solution": "\ndef order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[-5, -12, 9, 15]]]}], "HumanEval/118": [{"task_id": "HumanEval/118", "solution": "\ndef get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    for i in range(len(word) - 1, 0, -1):\n        if word[i] not in vowels and word[i-1] in vowels:\n            return word[i-1]\n    return ''\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["easy"]], "plus_fail_tests": [["alb"]]}], "HumanEval/142": [{"task_id": "HumanEval/142", "solution": "\ndef sum_squares(lst):\n    return sum([num**2 if idx % 3 == 0 else num**3 for idx, num in enumerate(lst)])\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/127": [{"task_id": "HumanEval/127", "solution": "\ndef is_prime(n):\n    if n <= 1 or (n % 2 == 0 and n > 2): \n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if start > end:  # If the two intervals don't intersect\n        return \"NO\"\n    \n    length_intersection = end - start + 1\n    return \"YES\" if is_prime(length_intersection) else \"NO\"\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[-1, 1], [0, 4]]], "plus_fail_tests": [[[10, 20], [15, 25]]]}], "HumanEval/120": [{"task_id": "HumanEval/120", "solution": "\ndef maximum(arr, k):\n    arr.sort()\n    return arr[-k:]\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3, -23, 243, -400, 0], 0]], "plus_fail_tests": [[[1], 0]]}], "HumanEval/129": [{"task_id": "HumanEval/129", "solution": "\ndef minPath(grid, k):\n    N = len(grid)\n    dp = [[[float('inf')] * (k+1) for _ in range(N)] for _ in range(N)]\n    path = [[[[None] * (k+1) for _ in range(N)] for _ in range(N)] for _ in range(N)]\n    \n    for x in range(N):\n        for y in range(N):\n            dp[x][y][0] = grid[x][y]\n            path[x][y][0] = [grid[x][y]]\n            \n    for step in range(1, k+1):\n        for x in range(N):\n            for y in range(N):\n                for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                    nx, ny = x + dx, y + dy\n                    if 0 <= nx < N and 0 <= ny < N:\n                        if dp[nx][ny][step-1] < dp[x][y][step]:\n                            dp[x][y][step] = dp[nx][ny][step-1]\n                            path[x][y][step] = path[nx][ny][step-1] + [grid[x][y]]\n                        elif dp[nx][ny][step-1] == dp[x][y][step]:\n                            if path[nx][ny][step-1] + [grid[x][y]] < path[x][y][step]:\n                                path[x][y][step] = path[nx][ny][step-1] + [grid[x][y]]\n    \n    min_path, min_val = None, float('inf')\n    for x in range(N):\n        for y in range(N):\n            if dp[x][y][k-1] < min_val:\n                min_val = dp[x][y][k-1]\n                min_path = path[x][y][k-1]\n    \n    return min_path[:k]\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 9]]}], "HumanEval/116": [{"task_id": "HumanEval/116", "solution": "\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/111": [{"task_id": "HumanEval/111", "solution": "\ndef histogram(test):\n    from collections import Counter\n    letters = test.split()\n    if not letters:\n        return {}\n    count = Counter(letters)\n    max_count = max(list(count.values()))\n    result = {k: v for k, v in count.items() if v == max_count}\n    return result\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/15": [{"task_id": "HumanEval/15", "solution": "\ndef string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n+1))\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}]}}